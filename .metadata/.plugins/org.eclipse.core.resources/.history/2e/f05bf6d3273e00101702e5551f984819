package com.minhaloja.sistema_pagamento.controller;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.List;

import javax.imageio.ImageIO;

import com.google.zxing.BarcodeFormat;
import com.google.zxing.MultiFormatWriter;
import com.google.zxing.client.j2se.MatrixToImageWriter;
import com.google.zxing.common.BitMatrix;
import com.minhaloja.sistema_pagamento.dao.ProdutoDAO;
import com.minhaloja.sistema_pagamento.model.Produto;

import javafx.animation.FadeTransition;
import javafx.animation.ScaleTransition;
import javafx.collections.ObservableList;
import javafx.embed.swing.SwingFXUtils;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.Cursor;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ChoiceBox;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.effect.DropShadow;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.VBox;
import javafx.stage.FileChooser;
import javafx.stage.Stage;
import javafx.util.Duration;

public class telaCadastroProdutoController {

    @FXML private VBox formulario;

    @FXML private TextField tfNomeProduto;
    @FXML private TextField tfPrecoCompra;
    @FXML private TextField tfPrecoVenda;
    @FXML private TextField tfPrecoMestre;
    @FXML private TextField tfMargem;
    @FXML private TextField tfLucroBruto;
    @FXML private TextField tfCategoria;
    @FXML private TextField tfGarantia;
    @FXML private TextField tfReferencia;
    @FXML private TextField tfEstoque;
    @FXML private TextField tfLoja;
    @FXML private TextField tfFabricante;
    @FXML private TextField tfFornecedor;
    @FXML private TextField tfInfoAdicional;
    @FXML private TextField tfCodigoBarra;
    @FXML private TextField tfCodigo;
    @FXML private TextField tfModelo;
    @FXML private TextField tfBusca;

    @FXML private TableView<Produto> tabelaProdutos;
    @FXML private TableColumn<Produto, String> colCodigoBarra;
    @FXML private TableColumn<Produto, String> colNome;
    @FXML private TableColumn<Produto, String> colCategoria;
    @FXML private TableColumn<Produto, Double> colEstoque;
    @FXML private TableColumn<Produto, Double> colPrecoVenda;
    @FXML private TableColumn<Produto, Double> colPrecoMestre;
    @FXML private TableColumn<Produto, Double> colPrecoCompra;
    @FXML private TableColumn<Produto, String> colReferencia;

    @FXML private Button btnFechar;
    @FXML private Button btnNovo;
    @FXML private Button btnGerar;
    @FXML private Button btnApagar;
    @FXML private Button btnExcluir;
    @FXML private Button btnInserirImgProduto;
    @FXML private Button btnApagarImgProduto;
    @FXML private Button btnBuscar;
    @FXML private Button btnTodos;

    @FXML private Label estoqueQTD;
    @FXML private Label contarP;

    @FXML private ImageView imgCodigoBarra;
    @FXML private ImageView imgProduto;

    @FXML private ChoiceBox<String> choiceCategoria;
    @FXML private ChoiceBox<String> choiceFornecedor;
    @FXML private ChoiceBox<String> choiceCor;

    private byte[] imgQrCode;
    private byte[] imgProdutoByte;

    private final ProdutoDAO produtoDAO = new ProdutoDAO();

    // ------------------------ Utilitários visuais ------------------------

    private void aplicarFadeTransition(javafx.scene.Node node) {
        FadeTransition ft = new FadeTransition(Duration.millis(600), node);
        ft.setFromValue(0);
        ft.setToValue(1);
        ft.play();
    }

    private void configurarImageViewComEfeito(ImageView imgView) {
        aplicarFadeTransition(imgView);
        imgView.setCursor(Cursor.HAND);
    }

    private void aplicarFadeEmTextField(TextField tf) {
        aplicarFadeTransition(tf);
    }

    private void adicionarEfeitoBotao(Button botao) {
        DropShadow sombra = new DropShadow();
        botao.setOnMouseEntered(e -> {
            botao.setEffect(sombra);
            botao.setCursor(Cursor.HAND);
            ScaleTransition st = new ScaleTransition(Duration.millis(150), botao);
            st.setToX(1.05);
            st.setToY(1.05);
            st.play();
        });
        botao.setOnMouseExited(e -> {
            botao.setEffect(null);
            botao.setCursor(Cursor.DEFAULT);
            ScaleTransition st = new ScaleTransition(Duration.millis(150), botao);
            st.setToX(1.0);
            st.setToY(1.0);
            st.play();
        });
    }

    private void atualizarContagemProdutos() {
        int total = produtoDAO.contarProdutos();
        contarP.setText(String.valueOf(total));

        ScaleTransition st = new ScaleTransition(Duration.millis(300), contarP);
        st.setFromX(1);
        st.setFromY(1);
        st.setToX(1.2);
        st.setToY(1.2);
        st.setAutoReverse(true);
        st.setCycleCount(2);
        st.play();

        FadeTransition ft = new FadeTransition(Duration.millis(300), contarP);
        ft.setFromValue(0.7);
        ft.setToValue(1.0);
        ft.play();
    }

    private void configurarColunasTabela() {
        colCodigoBarra.setCellValueFactory(new PropertyValueFactory<>("codigoBarra"));
        colNome.setCellValueFactory(new PropertyValueFactory<>("nome"));
        colCategoria.setCellValueFactory(new PropertyValueFactory<>("categoria"));
        colEstoque.setCellValueFactory(new PropertyValueFactory<>("estoque"));
        colPrecoVenda.setCellValueFactory(new PropertyValueFactory<>("precoVenda"));
        colPrecoMestre.setCellValueFactory(new PropertyValueFactory<>("precoMestre"));
        colPrecoCompra.setCellValueFactory(new PropertyValueFactory<>("precoCompra"));
        colReferencia.setCellValueFactory(new PropertyValueFactory<>("referencia"));
    }

    private void carregarProdutosNaTabela() {
        tabelaProdutos.setItems(produtoDAO.listarProdutos());
    }

    // ------------------------ Métodos FXML ------------------------

    @FXML
    private void initialize() {
        carregarCoresChoiceBox();
        carregarCategoriasNoChoiceBox();
        carregarFornecedoresNoChoiceBox();
        atualizarContagemProdutos();

        configurarColunasTabela();
        carregarProdutosNaTabela();

        aplicarFadeTransition(tabelaProdutos);

        Image imagemPadraoQr = new Image(getClass().getResourceAsStream("/img/semQrCode.png"));
        imgCodigoBarra.setImage(imagemPadraoQr);
        imgCodigoBarra.setPreserveRatio(true);
        imgCodigoBarra.setSmooth(true);
        aplicarFadeTransition(imgCodigoBarra);

        tabelaProdutos.getSelectionModel().selectedItemProperty().addListener((obs, oldSel, newSel) -> {
            if (newSel != null) {
                preencherCamposComProduto(newSel);
                aplicarFadeTransition(imgProduto);
            }
        });

        choiceCategoria.getSelectionModel().selectedItemProperty().addListener((obs, oldVal, newVal) -> {
            if (newVal != null) {
                tfCategoria.setText(newVal);
                aplicarFadeTransition(tfCategoria);
            }
        });

        choiceFornecedor.getSelectionModel().selectedItemProperty().addListener((obs, oldVal, newVal) -> {
            if (newVal != null) {
                tfFornecedor.setText(newVal);
                aplicarFadeTransition(tfFornecedor);
            }
        });

        Button[] botoes = { btnFechar, btnNovo, btnGerar, btnApagar, btnExcluir,
                btnInserirImgProduto, btnApagarImgProduto, btnBuscar, btnTodos };

        for (Button b : botoes) {
            adicionarEfeitoBotao(b);
        }
    }

    @FXML
    private void listarProdutos() {
        carregarProdutosNaTabela();
    }

    @FXML
    private void buscarProduto(ActionEvent event) {
        String textoBusca = tfBusca.getText().trim();

        if (!textoBusca.isEmpty()) {
            ObservableList<Produto> resultados = produtoDAO.buscarProdutosPorTexto(textoBusca);
            tabelaProdutos.setItems(resultados);
        } else {
            carregarProdutosNaTabela();
        }
    }

    @FXML
    private void apagarImgProduto() {
        imgProduto.setImage(null);
        imgProdutoByte = null;
    }

    @FXML
    private void selecionarImagem() {
        FileChooser fileChooser = new FileChooser();
        fileChooser.setTitle("Selecionar Imagem do Produto");
        fileChooser.getExtensionFilters().addAll(
                new FileChooser.ExtensionFilter("Imagens", "*.png", "*.jpg", "*.jpeg"));

        File arquivo = fileChooser.showOpenDialog(new Stage());

        if (arquivo != null) {
            try (FileInputStream fis = new FileInputStream(arquivo);
                    ByteArrayOutputStream baos = new ByteArrayOutputStream()) {

                byte[] buffer = new byte[1024];
                int bytesLidos;
                while ((bytesLidos = fis.read(buffer)) != -1) {
                    baos.write(buffer, 0, bytesLidos);
                }

                imgProdutoByte = baos.toByteArray();

                Image imagem = new Image(new ByteArrayInputStream(imgProdutoByte));
                imgProduto.setImage(imagem);
                imgProduto.setPreserveRatio(true);
                aplicarFadeTransition(imgProduto);

            } catch (IOException e) {
                mostrarAlerta("Erro", "Erro ao carregar a imagem: " + e.getMessage());
            }
        }
    }

    @FXML
    private void salvarProduto() {
        try {
            Produto produto = new Produto();

            produto.setCodigo(tfCodigo.getText().trim());
            produto.setNome(tfNomeProduto.getText().trim());
            produto.setPrecoCompra(parseDouble(tfPrecoCompra.getText()));
            produto.setPrecoVenda(parseDouble(tfPrecoVenda.getText()));
            produto.setPrecoMestre(parseDouble(tfPrecoMestre.getText()));
            produto.setMargem(parseDouble(tfMargem.getText()));
            produto.setLucroBruto(parseDouble(tfLucroBruto.getText()));
            produto.setCategoria(tfCategoria.getText().trim());
            produto.setGarantia(tfGarantia.getText().trim());
            produto.setReferencia(tfReferencia.getText().trim());
            produto.setEstoque(parseDouble(tfEstoque.getText()));
            produto.setLoja(tfLoja.getText().trim());
            produto.setFabricante(tfFabricante.getText().trim());
            produto.setFornecedor(tfFornecedor.getText().trim());
            produto.setInfoAdicional(tfInfoAdicional.getText().trim());
            produto.setCodigoBarra(tfCodigoBarra.getText().trim());
            produto.setModelo(tfModelo.getText().trim());
            produto.setCor(choiceCor.getValue());

            if (imgProdutoByte != null) {
                produto.setImagemProduto(imgProdutoByte);
            }

            if (imgQrCode != null) {
                produto.setImagemQrCode(imgQrCode);
            }

            if (produtoDAO.existeProdutoPorCodigo(produto.getCodigo())) {
                produtoDAO.atualizarProduto(produto);
                mostrarAlerta("Sucesso", "Produto atualizado com sucesso.");
            } else {
                produtoDAO.inserirProduto(produto);
                mostrarAlerta("Sucesso", "Produto inserido com sucesso.");
            }

            limparCampos();
            carregarProdutosNaTabela();
            atualizarContagemProdutos();

        } catch (NumberFormatException e) {
            mostrarAlerta("Erro", "Valores numéricos inválidos: " + e.getMessage());
        } catch (Exception e) {
            mostrarAlerta("Erro", "Erro ao salvar produto: " + e.getMessage());
        }
    }

    @FXML
    private void gerarCodigoQr() {
        try {
            String texto = tfCodigoBarra.getText().trim();

            if (texto.isEmpty()) {
                mostrarAlerta("Aviso", "O campo código de barras está vazio.");
                return;
            }

            int largura = 250;
            int altura = 250;

            BitMatrix matrix = new MultiFormatWriter().encode(texto, BarcodeFormat.QR_CODE, largura, altura);
            BufferedImage bufferedImage = MatrixToImageWriter.toBufferedImage(matrix);

            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            ImageIO.write(bufferedImage, "png", baos);
            baos.flush();

            imgQrCode = baos.toByteArray();

            Image qrImage = SwingFXUtils.toFXImage(bufferedImage, null);
            imgCodigoBarra.setImage(qrImage);

            baos.close();

        } catch (Exception e) {
            mostrarAlerta("Erro", "Erro ao gerar código QR: " + e.getMessage());
        }
    }

    @FXML
    private void limparCampos() {
        tfCodigo.clear();
        tfNomeProduto.clear();
        tfPrecoCompra.clear();
        tfPrecoVenda.clear();
        tfPrecoMestre.clear();
        tfMargem.clear();
        tfLucroBruto.clear();
        tfCategoria.clear();
        tfGarantia.clear();
        tfReferencia.clear();
        tfEstoque.clear();
        tfLoja.clear();
        tfFabricante.clear();
        tfFornecedor.clear();
        tfInfoAdicional.clear();
        tfCodigoBarra.clear();
        tfModelo.clear();

        imgProduto.setImage(null);
        imgProdutoByte = null;

        Image imagemPadraoQr = new Image(getClass().getResourceAsStream("/img/semQrCode.png"));
        imgCodigoBarra.setImage(imagemPadraoQr);
        imgQrCode = null;

        choiceCategoria.getSelectionModel().clearSelection();
        choiceFornecedor.getSelectionModel().clearSelection();
        choiceCor.getSelectionModel().clearSelection();

        tfNomeProduto.requestFocus();
    }

    @FXML
    private void excluirProduto() {
        Produto produtoSelecionado = tabelaProdutos.getSelectionModel().getSelectedItem();

        if (produtoSelecionado != null) {
            boolean sucesso = produtoDAO.excluirProduto(produtoSelecionado.getCodigo());

            if (sucesso) {
                mostrarAlerta("Sucesso", "Produto excluído com sucesso.");
                carregarProdutosNaTabela();
                limparCampos();
                atualizarContagemProdutos();
            } else {
                mostrarAlerta("Erro", "Erro ao excluir o produto.");
            }
        } else {
            mostrarAlerta("Aviso", "Nenhum produto selecionado para exclusão.");
        }
    }

    @FXML
    private void fecharJanela() {
        Stage stage = (Stage) btnFechar.getScene().getWindow();
        stage.close();
    }

    // ------------------------ Métodos auxiliares ------------------------

    private void preencherCamposComProduto(Produto p) {
        tfCodigo.setText(p.getCodigo());
        tfNomeProduto.setText(p.getNome());
        tfPrecoCompra.setText(String.valueOf(p.getPrecoCompra()));
        tfPrecoVenda.setText(String.valueOf(p.getPrecoVenda()));
        tfPrecoMestre.setText(String.valueOf(p.getPrecoMestre()));
        tfMargem.setText(String.valueOf(p.getMargem()));
        tfLucroBruto.setText(String.valueOf(p.getLucroBruto()));
        tfCategoria.setText(p.getCategoria());
        tfGarantia.setText(p.getGarantia());
        tfReferencia.setText(p.getReferencia());
        tfEstoque.setText(String.valueOf(p.getEstoque()));
        tfLoja.setText(p.getLoja());
        tfFabricante.setText(p.getFabricante());
        tfFornecedor.setText(p.getFornecedor());
        tfInfoAdicional.setText(p.getInfoAdicional());
        tfCodigoBarra.setText(p.getCodigoBarra());
        tfModelo.setText(p.getModelo());

        choiceCategoria.setValue(p.getCategoria());
        choiceFornecedor.setValue(p.getFornecedor());
        choiceCor.setValue(p.getCor());

        if (p.getImagemProduto() != null) {
            Image imagem = new Image(new ByteArrayInputStream(p.getImagemProduto()));
            imgProduto.setImage(imagem);
            aplicarFadeTransition(imgProduto);
        } else {
            imgProduto.setImage(null);
        }

        if (p.getImagemQrCode() != null) {
            Image qrImagem = new Image(new ByteArrayInputStream(p.getImagemQrCode()));
            imgCodigoBarra.setImage(qrImagem);
        } else {
            Image imagemPadraoQr = new Image(getClass().getResourceAsStream("/img/semQrCode.png"));
            imgCodigoBarra.setImage(imagemPadraoQr);
        }
    }

    private void carregarCoresChoiceBox() {
        choiceCor.getItems().clear();
        choiceCor.getItems().addAll("Preto", "Branco", "Azul", "Verde", "Vermelho", "Amarelo");
    }

    private void carregarCategoriasNoChoiceBox() {
        choiceCategoria.getItems().clear();
        choiceCategoria.getItems().addAll(produtoDAO.listarCategorias());
    }

    private void carregarFornecedoresNoChoiceBox() {
        choiceFornecedor.getItems().clear();
        choiceFornecedor.getItems().addAll(produtoDAO.listarFornecedores());
    }

    private double parseDouble(String texto) {
        if (texto == null || texto.isEmpty()) {
            return 0.0;
        }
        return Double.parseDouble(texto.replace(",", "."));
    }

    private void mostrarAlerta(String titulo, String mensagem) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(titulo);
        alert.setHeaderText(null);
        alert.setContentText(mensagem);
        alert.showAndWait();
    }

}
