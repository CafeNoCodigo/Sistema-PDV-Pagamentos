package com.minhaloja.sistema_pagamento.controller;

import java.io.ByteArrayInputStream;

import com.minhaloja.sistema_pagamento.dao.ProdutoDAO;
import com.minhaloja.sistema_pagamento.model.ItemVenda;
import com.minhaloja.sistema_pagamento.model.Produto;

import javafx.beans.property.SimpleDoubleProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.stage.Stage;

public class telaVendaController  {

	@FXML public TableView<Produto> tabelaProdutos;
    @FXML private TableColumn<Produto, String> colCodigo;
    @FXML private TableColumn<ItemVenda, String> colCodigo2;
    @FXML private TableColumn<Produto, String> colNome;
    @FXML private TableColumn<Produto, Double> colEstoque;
    @FXML private TableColumn<Produto, Double> colPreco;
    @FXML private TableColumn<Produto, Double> colPrecoMestre;
    @FXML private TableColumn<Produto, Double> colCategoria;
    @FXML private TableView<ItemVenda> tabelaItensVenda;
    @FXML private TableColumn<ItemVenda, String> colItemNome;
    @FXML private TableColumn<ItemVenda, Integer> colItemQuantidade;
    @FXML private TableColumn<ItemVenda, Double> colItemSubtotal;
    
    @FXML private Button btnFechar;
    @FXML private Button btnBusca;
    @FXML private Button btnListaTodos;
    @FXML private Button btnAdicionar;
    
    @FXML private TextField tfBusca;
    
    @FXML private Label lbPreco;
    @FXML private Label lbTotal;
    
    @FXML private ImageView imgProduto;
    
    ProdutoDAO produtoDAO = new ProdutoDAO();
    private Venda venda = new Venda();
    Produto produto = new Produto();

    private ObservableList<ItemVenda> itensVenda = FXCollections.observableArrayList();
    
    @FXML
    private void removerItemSelecionado() {
        ItemVenda itemSelecionado = tabelaItensVenda.getSelectionModel().getSelectedItem();

        if (itemSelecionado != null) {
            int quantidadeAtual = itemSelecionado.getQuantidade();
            double precoUnitario = itemSelecionado.getProduto().getPrecoVenda();

            if (quantidadeAtual > 1) {
                itemSelecionado.setQuantidade(quantidadeAtual - 1);
                itemSelecionado.setSubtotal(itemSelecionado.getSubtotal() - precoUnitario);

                // Atualiza a tabela manualmente se necessário
                tabelaItensVenda.refresh();
            } else {
                itensVenda.remove(itemSelecionado);
            }

            // Subtrai do total geral
            totalVenda -= precoUnitario;
            lbTotal.setText(String.format("MZN$ %.2f", totalVenda));
        }
    }

    @FXML
    private void adicionarProdutoAVenda() {
    	
        Produto selecionado = tabelaProdutos.getSelectionModel().getSelectedItem();
        if (selecionado == null) return;

        // Verifica se o produto já está na lista
        for (ItemVenda item : itensVenda) {
            if (item.getProduto().getCodigoBarra().equals(selecionado.getCodigoBarra())) {
                item.incrementarQuantidade();
                tabelaItensVenda.refresh(); // atualiza a tabela
                venda.adicionarPreco(selecionado.getPrecoVenda());
                lbTotal.setText(String.format("MZN$ %.2f", venda.getTotalProduto()));
                return;
            }
        }

        // Se não estiver na lista, adiciona como novo item
        ItemVenda novoItem = new ItemVenda(selecionado);
        itensVenda.add(novoItem);
        venda.adicionarPreco(selecionado.getPrecoVenda());
        lbTotal.setText(String.format("MZN$ %.2f", venda.getTotalProduto()));
    }

    

    @FXML
    private void listarTodos() {
    	colCodigo.setCellValueFactory(new PropertyValueFactory<>("codigoBarra"));
        colNome.setCellValueFactory(new PropertyValueFactory<>("nome"));
        colEstoque.setCellValueFactory(new PropertyValueFactory<>("estoque"));
        colPreco.setCellValueFactory(new PropertyValueFactory<>("precoVenda"));
        colPrecoMestre.setCellValueFactory(new PropertyValueFactory<>("precoMestre"));
        colCategoria.setCellValueFactory(new PropertyValueFactory<>("categoria"));
        
        tabelaProdutos.setItems(produtoDAO.listarProdutos());
     
    }
    
    @FXML
    private void buscarProduto(ActionEvent event) {
        String textoBusca = tfBusca.getText().trim();

        if (!textoBusca.isEmpty()) {
            ObservableList<Produto> resultados = produtoDAO.buscarProdutosPorTexto(textoBusca);
            tabelaProdutos.setItems(resultados);
        } else {
            tabelaProdutos.setItems(produtoDAO.listarProdutos());
        }
    }
    
    @FXML
    private void fecharJanela() {
        Stage stage = (Stage) btnFechar.getScene().getWindow();
        stage.close();
    }

	@FXML
    public void initialize() {
    	colCodigo.setCellValueFactory(new PropertyValueFactory<>("codigoBarra"));
        colNome.setCellValueFactory(new PropertyValueFactory<>("nome"));
        colEstoque.setCellValueFactory(new PropertyValueFactory<>("estoque"));
        colPreco.setCellValueFactory(new PropertyValueFactory<>("precoVenda"));
        colPrecoMestre.setCellValueFactory(new PropertyValueFactory<>("precoMestre"));
        colCategoria.setCellValueFactory(new PropertyValueFactory<>("categoria"));
        
        tabelaProdutos.setItems(produtoDAO.listarProdutos());
        
        tabelaProdutos.getSelectionModel().selectedItemProperty().addListener((obs, oldSelection, newSelection) -> {
            if (newSelection != null) {
                double preco = newSelection.getPrecoVenda();
                lbPreco.setText(String.format("MZN$ %.2f", preco));

                try {
                    byte[] imagemBytes = newSelection.getImagem();
                    if (imagemBytes != null) {
                        ByteArrayInputStream bis = new ByteArrayInputStream(imagemBytes);
                        Image imagemP = new Image(bis);
                        imgProduto.setImage(imagemP);
                    } else {
                        Image imagemPadrao = new Image(getClass().getResourceAsStream("/img/semImg.png"));
                        imgProduto.setImage(imagemPadrao);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else {
                lbPreco.setText("");
                Image imagemPadrao = new Image(getClass().getResourceAsStream("/img/semImg.png"));
                imgProduto.setImage(imagemPadrao);
            }
        });
        
        colCodigo2.setCellValueFactory(data -> new SimpleStringProperty(data.getValue().produto.getCodigoBarra()));
        colItemNome.setCellValueFactory(data -> new SimpleStringProperty(data.getValue().getNome()));
        colItemQuantidade.setCellValueFactory(new PropertyValueFactory<>("quantidade"));
        colItemSubtotal.setCellValueFactory(data -> new SimpleDoubleProperty(data.getValue().getSubtotal()).asObject());

        tabelaItensVenda.setItems(itensVenda);
    }
}
