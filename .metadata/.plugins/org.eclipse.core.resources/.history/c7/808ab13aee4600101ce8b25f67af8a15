package com.minhaloja.sistema_pagamento.controller;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.util.Iterator;
import java.util.List;

import javax.imageio.ImageIO;

import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import com.google.zxing.BarcodeFormat;
import com.google.zxing.MultiFormatWriter;
import com.google.zxing.client.j2se.MatrixToImageWriter;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.encoder.QRCode;
import com.minhaloja.sistema_pagamento.dao.ProdutoDAO;
import com.minhaloja.sistema_pagamento.model.Produto;

import javafx.animation.FadeTransition;
import javafx.animation.ScaleTransition;
import javafx.collections.ObservableList;
import javafx.embed.swing.SwingFXUtils;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.Cursor;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ChoiceBox;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.effect.DropShadow;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import javafx.util.Duration;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import javafx.stage.FileChooser;

public class telaCadastroProdutoController {

	@FXML private VBox formulario;
	@FXML private TextField tfNomeProduto, tfPrecoCompra, tfPrecoVenda, tfPrecoMestre, tfMargem, tfLucroBruto, tfCategoria, tfGarantia;
    @FXML private TextField tfReferencia, tfEstoque, tfLoja, tfFabricante, tfFornecedor, tfInfoAdicional,tfCodigoBarra, tfCodigo;
    @FXML private TextField tfModelo, tfBusca, tfCambio;
    
    @FXML public TableView<Produto> tabelaProdutos;
    @FXML private TableColumn<Produto, String> colCodigoBarra;
    @FXML private TableColumn<Produto, String> colNome;
    @FXML private TableColumn<Produto, String> colCategoria;
    @FXML private TableColumn<Produto, Double> colEstoque;
    @FXML private TableColumn<Produto, Double> colPrecoVenda;
    @FXML private TableColumn<Produto, Double> colPrecoMestre;
    @FXML private TableColumn<Produto, Double> colPrecoCompra;
    @FXML private TableColumn<Produto, Double> colReferencia;
    
    @FXML private Button btnFechar;
    @FXML private Button btnNovo;
    @FXML private Button btnGerar;
    @FXML private Button btnApagar;
    @FXML private Button btnExcluir;
    @FXML private Button btnInserirImgProduto;
    @FXML private Button btnApagarImgProduto;
    @FXML private Button btnTodos;
    
    @FXML private Label estoqueQTD;
    @FXML private Label contarP;
    
    @FXML private ImageView imgCodigoBarra;
    @FXML private ImageView imgProduto;
    
    @FXML private ChoiceBox<String> choiceCategoria;
    
    @FXML private ChoiceBox<String> choiceFornecedor;
    @FXML private ChoiceBox<String> choiceCor;
    
    @FXML private ComboBox<String> cbMoedaCompra;
    
    private byte[] imgQrCode;
    private byte[] imgProdutoByte;
    
    private final ProdutoDAO produtoDAO = new ProdutoDAO();
    
    private double cambio = 1;
    
    @FXML public void initialize() {
        carregarCoresChoiceBox();
        carregarMoedaCompraNoComboBox();
        carregarCategoriasNoChoiceBox();
        carregarfornecedoresNoChoiceBox();
        contarProdutosComEfeito();

        aplicarFadeTransition(tabelaProdutos);

        // Imagem padrão e efeito fade
        Image imagemPadrao2 = new Image(getClass().getResourceAsStream("/img/semQrCode.png"));
        imgCodigoBarra.setImage(imagemPadrao2);
        imgCodigoBarra.setPreserveRatio(true);
        imgCodigoBarra.setSmooth(true);
        aplicarFadeTransition(imgCodigoBarra);

        // Configura colunas
        colCodigoBarra.setCellValueFactory(new PropertyValueFactory<>("codigoBarra"));
        colNome.setCellValueFactory(new PropertyValueFactory<>("nome"));
        colCategoria.setCellValueFactory(new PropertyValueFactory<>("categoria"));
        colEstoque.setCellValueFactory(new PropertyValueFactory<>("estoque"));
        colPrecoVenda.setCellValueFactory(new PropertyValueFactory<>("precoVenda"));
        colPrecoMestre.setCellValueFactory(new PropertyValueFactory<>("precoMestre"));
        colPrecoCompra.setCellValueFactory(new PropertyValueFactory<>("precoCompra"));
        colReferencia.setCellValueFactory(new PropertyValueFactory<>("referencia"));
        
        tabelaProdutos.setItems(produtoDAO.listarProdutos2());
        
        tabelaProdutos.getSelectionModel().selectedItemProperty().addListener((obs, oldSelection, newSelection) -> {
            if (newSelection != null) {
                preencherCamposComProduto(newSelection);
                aplicarFadeTransition(imgProduto);
            }
        }); 
        
        
        
        choiceCategoria.getSelectionModel().selectedItemProperty().addListener((obs, oldVal, newVal) -> {
            if (newVal != null) {
                tfCategoria.setText(newVal);
                aplicarFadeTransition(tfCategoria);
            }
        });
        
        choiceFornecedor.getSelectionModel().selectedItemProperty().addListener((obs, oldVal, newVal) -> {
            if (newVal != null) {
                tfFornecedor.setText(newVal);
                aplicarFadeTransition(tfFornecedor);
            }
        });
        
        cbMoedaCompra.getSelectionModel().selectedItemProperty().addListener((obs, oldVal, newVal) -> {
            if (newVal != null) {
                if(newVal.equals("RMB")) {
                	Alert sucessoAlerta = new Alert(Alert.AlertType.INFORMATION);
                    sucessoAlerta.setTitle("Atenção!");
                    sucessoAlerta.setHeaderText("Informe o câmbio do RMB atual..");
                    sucessoAlerta.showAndWait();
                	tfCambio.setDisable(false);
                }else if(newVal.equals("DOLAR")) {
                	Alert sucessoAlerta = new Alert(Alert.AlertType.INFORMATION);
                    sucessoAlerta.setTitle("Atenção!");
                    sucessoAlerta.setHeaderText("Informe o câmbio do DOLAR atual.");
                    sucessoAlerta.showAndWait();
                	tfCambio.setDisable(false);
                }else if(newVal.equals("MZN")) {
                	tfCambio.setDisable(true);
                }
            }
        });
        
        aplicarFadeTransition(tfNomeProduto);
        aplicarFadeTransition(tfPrecoCompra);
        aplicarFadeTransition(tfPrecoVenda);
        aplicarFadeTransition(tfPrecoMestre);
        aplicarFadeTransition(tfCategoria);
        Button[] botoes = {
            btnFechar, btnNovo, btnGerar, btnApagar, btnExcluir, btnInserirImgProduto,
            btnApagarImgProduto, btnTodos
        };
        for (Button botao : botoes) {
            adicionarEfeitoBotao(botao);
        }
        
        configurarImageViewComEfeito(imgCodigoBarra);
        configurarImageViewComEfeito(imgProduto);
        
        tfBusca.textProperty().addListener((obs, antigo, novo) -> {
            String texto = novo == null ? "" : novo.trim().toLowerCase();

            if (!texto.isEmpty()) {
                ObservableList<Produto> resultados = produtoDAO.buscarProdutosPorTexto(texto);
                tabelaProdutos.setItems(resultados);
            } else {
                tabelaProdutos.setItems(produtoDAO.listarProdutos2());
            }
        });
    }
    
    @FXML
    private void importarProdutosExcel(ActionEvent event) {
        FileChooser fileChooser = new FileChooser();
        fileChooser.setTitle("Selecionar arquivo Excel");
        fileChooser.getExtensionFilters().addAll(
            new FileChooser.ExtensionFilter("Planilhas Excel", "*.xlsx", "*.xls")
        );
        File file = fileChooser.showOpenDialog(btnImportar.getScene().getWindow());
        if (file != null) {
            importarProdutosDoExcel(file);
        }
    }


    @FXML private Button btnImportar;
    private void importarProdutosDoExcel(File file) {
        try (FileInputStream fis = new FileInputStream(file);
             Workbook workbook = criarWorkbookCorreto(file)) {

            Sheet sheet = workbook.getSheetAt(0);

            for (int i = 1; i <= sheet.getLastRowNum(); i++) {
                Row row = sheet.getRow(i);
                if (row == null) continue;

                Produto produto = new Produto();

                // Coluna 0: codigoBarra
                Cell cellCodigo = row.getCell(0);
                String codigoBarra = (cellCodigo == null || cellCodigo.getCellType() == CellType.BLANK)
                        ? gerarCodigoBarras()
                        : getCellString(cellCodigo);

                produto.setCodigoBarra(codigoBarra);

                // Gerar imagem do QR Code e salvar como byte[]
                try {
                    BufferedImage qrImage = QRCode.gerarCodigoDeBarrasImage(codigoBarra);
                    ByteArrayOutputStream baos = new ByteArrayOutputStream();
                    ImageIO.write(qrImage, "png", baos);
                    produto.setQrCode(baos.toByteArray());
                } catch (IOException e) {
                    System.err.println("Erro ao gerar imagem QR para código: " + codigoBarra);
                    e.printStackTrace();
                }

                // Preenchimento dos outros campos
                produto.setNome(getCellString(row.getCell(1)));             // nome
                produto.setFornecedor(getCellString(row.getCell(2)));       // fornecedor
                produto.setEstoque((int) getCellNumeric(row.getCell(3)));  // quantidade/estoque
                produto.setCategoria(getCellString(row.getCell(4)));        // categoria
                produto.setPrecoCompra(getCellNumeric(row.getCell(5)));     // precoCompra
                produto.setPrecoMestre(getCellNumeric(row.getCell(6)));     // precoMestre
                produto.setPrecoVenda(getCellNumeric(row.getCell(7)));      // precoVenda
                produto.setModelo(getCellString(row.getCell(8)));           // modelo
                produto.setCor(getCellString(row.getCell(9)));              // cor
                produto.setReferencia(getCellString(row.getCell(10)));      // referencia
                produto.setLoja(getCellString(row.getCell(11)));            // loja

                // Salvar no banco
                produtoDAO.salvarProduto(produto);
            }

            // Exibir mensagem final de sucesso
            Alert alerta = new Alert(Alert.AlertType.INFORMATION);
            alerta.setTitle("Sucesso");
            alerta.setHeaderText("Importação Concluída");
            alerta.setContentText("Todos os produtos foram importados com sucesso.");
            alerta.showAndWait();

        } catch (Exception e) {
            e.printStackTrace();
            Alert alerta = new Alert(Alert.AlertType.ERROR);
            alerta.setTitle("Erro");
            alerta.setHeaderText("Erro ao Importar");
            alerta.setContentText("Não foi possível importar os produtos: " + e.getMessage());
            alerta.showAndWait();
        }
    }


	private Workbook criarWorkbookCorreto(File file) throws IOException {
	    FileInputStream fis = new FileInputStream(file);

	    // Detecta o tipo de arquivo pelo conteúdo (não apenas pela extensão)
	    if (file.getName().toLowerCase().endsWith(".xlsx")) {
	        try {
	            return new XSSFWorkbook(fis);
	        } catch (Exception e) {
	            throw new IOException("Erro ao abrir arquivo .xlsx", e);
	        }
	    } else if (file.getName().toLowerCase().endsWith(".xls")) {
	        try {
	            return new HSSFWorkbook(fis);
	        } catch (Exception e) {
	            throw new IOException("Erro ao abrir arquivo .xls", e);
	        }
	    } else {
	        throw new IllegalArgumentException("Formato de arquivo não suportado: " + file.getName());
	    }
	}


    private String getCellString(Cell cell) {
        if (cell == null) return "";
        return switch (cell.getCellType()) {
            case STRING -> cell.getStringCellValue().trim();
            case NUMERIC -> String.valueOf((long) cell.getNumericCellValue());
            case BOOLEAN -> String.valueOf(cell.getBooleanCellValue());
            default -> "";
        };
    }

    private double getCellNumeric(Cell cell) {
        if (cell == null) return 0.0;
        return switch (cell.getCellType()) {
            case NUMERIC -> cell.getNumericCellValue();
            case STRING -> {
                try { yield Double.parseDouble(cell.getStringCellValue()); }
                catch (NumberFormatException e) { yield 0.0; }
            }
            default -> 0.0;
        };
    }


    
    //Fade transition genérico para qualquer Node
    private void aplicarFadeTransition(javafx.scene.Node node) {
        FadeTransition ft = new FadeTransition(Duration.millis(600), node);
        ft.setFromValue(0);
        ft.setToValue(1);
        ft.play();
    }

    // Configura ImageView com fade + cursor mão
    private void configurarImageViewComEfeito(ImageView imgView) {
        aplicarFadeTransition(imgView);
        imgView.setCursor(Cursor.HAND);
    }

    // Aplica fade em TextField ao limpar ou preencher - use no limparCampos e ao preencher
    private void aplicarFadeEmTextField(TextField tf) {
        aplicarFadeTransition(tf);
    }
    
 // Botão: sombra + cursor + escala suave no hover
    private void adicionarEfeitoBotao(Button botao) {
        DropShadow sombra = new DropShadow();
        
        botao.setOnMouseEntered(e -> {
            botao.setEffect(sombra);
            botao.setCursor(Cursor.HAND);
            ScaleTransition st = new ScaleTransition(Duration.millis(150), botao);
            st.setToX(1.05);
            st.setToY(1.05);
            st.play();
        });
        
        botao.setOnMouseExited(e -> {
            botao.setEffect(null);
            botao.setCursor(Cursor.DEFAULT);
            ScaleTransition st = new ScaleTransition(Duration.millis(150), botao);
            st.setToX(1.0);
            st.setToY(1.0);
            st.play();
        });
    }
    
    private void contarProdutosComEfeito() {
        int total = produtoDAO.contarProdutos();
        contarP.setText(String.valueOf(total));
        // Escala + Fade para destacar atualização
        ScaleTransition st = new ScaleTransition(Duration.millis(300), contarP);
        st.setFromX(1);
        st.setFromY(1);
        st.setToX(1.2);
        st.setToY(1.2);
        st.setAutoReverse(true);
        st.setCycleCount(2);
        st.play();

        FadeTransition ft = new FadeTransition(Duration.millis(300), contarP);
        ft.setFromValue(0.7);
        ft.setToValue(1.0);
        ft.play();
    }
    
    @FXML
    private void listarTodos() {
    	colCodigoBarra.setCellValueFactory(new PropertyValueFactory<>("codigoBarra"));
        colNome.setCellValueFactory(new PropertyValueFactory<>("nome"));
        colCategoria.setCellValueFactory(new PropertyValueFactory<>("categoria"));
        colEstoque.setCellValueFactory(new PropertyValueFactory<>("estoque"));
        colPrecoVenda.setCellValueFactory(new PropertyValueFactory<>("precoVenda"));
        colPrecoMestre.setCellValueFactory(new PropertyValueFactory<>("precoMestre"));
        colPrecoCompra.setCellValueFactory(new PropertyValueFactory<>("precoCompra"));
        colReferencia.setCellValueFactory(new PropertyValueFactory<>("referencia"));
        
        tabelaProdutos.setItems(produtoDAO.listarProdutos2());
    }
    
    @FXML public void apagarImgProduto() {
    	imgProduto.setImage(null);
    }
    
    @FXML private void selecionarImagem() {
        FileChooser fileChooser = new FileChooser();
        fileChooser.setTitle("Selecionar Imagem do Produto");

        // Filtrar tipos de imagem
        fileChooser.getExtensionFilters().addAll(
            new FileChooser.ExtensionFilter("Imagens", "*.png", "*.jpg", "*.jpeg", "*.gif", "*.jfif")
        );

        File arquivo = fileChooser.showOpenDialog(btnInserirImgProduto.getScene().getWindow());

        if (arquivo != null) {
            try (InputStream is = new FileInputStream(arquivo)) {
            	imgProdutoByte = is.readAllBytes(); // ← Armazena os bytes para salvar no banco
                Image imagem = new Image(new FileInputStream(arquivo));
                imgProduto.setImage(imagem); // ← Mostra no ImageView, pode trocar por outro se preferir
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    @FXML public void excluirProdutoSelecionado() {
        Produto selecionado = tabelaProdutos.getSelectionModel().getSelectedItem();
        
        if (selecionado == null) {
            Alert alerta = new Alert(Alert.AlertType.WARNING);
            alerta.setTitle("Nenhuma seleção");
            alerta.setHeaderText("Nenhum produto selecionado");
            alerta.setContentText("Por favor, selecione um produto na tabela.");
            alerta.showAndWait();
            return;
        }

        // Confirmação
        Alert confirmacao = new Alert(Alert.AlertType.CONFIRMATION);
        confirmacao.setTitle("Confirmar exclusão");
        confirmacao.setHeaderText("Você tem certeza que deseja excluir este produto?");
        confirmacao.setContentText("Produto: " + selecionado.getNome());

        // Espera a resposta do usuário
        confirmacao.showAndWait().ifPresent(resposta -> {
            if (resposta == javafx.scene.control.ButtonType.OK) {
                boolean sucesso = produtoDAO.excluirProduto(selecionado.getCodigoBarra());

                if (sucesso) {
                    Alert sucessoAlerta = new Alert(Alert.AlertType.INFORMATION);
                    sucessoAlerta.setTitle("Sucesso");
                    sucessoAlerta.setHeaderText("Produto excluído com sucesso.");
                    sucessoAlerta.showAndWait();
                    
                    carregarProdutosNaTabela();
                    contarProdutos();           
                    limparCampos();             
                } else {
                    Alert erro = new Alert(Alert.AlertType.ERROR);
                    erro.setTitle("Erro");
                    erro.setHeaderText("Erro ao excluir produto");
                    erro.setContentText("Não foi possível excluir o produto.");
                    erro.showAndWait();
                }
            }
        });
    }

    @FXML private void carregarCategoriasNoChoiceBox() {
        List<String> categorias = produtoDAO.listarCategoriasUnicas();
        choiceCategoria.getItems().setAll(categorias);
    }
    
    @FXML private void carregarfornecedoresNoChoiceBox() {
        List<String> fornecedores = produtoDAO.listarFornecedores();
        choiceFornecedor.getItems().setAll(fornecedores);
    }
    
    @FXML private void carregarCoresChoiceBox() {
        choiceCor.getItems().setAll(
            "Vermelho", "Verde", "Azul", "Amarelo", "Laranja", "Roxo", "Rosa", "Castanho", "Cinza", "Preto", "Branco", "Ciano"
        );
    }
    
    @FXML
    private void carregarMoedaCompraNoComboBox() {
    	cbMoedaCompra.getItems().setAll("MZN", "RMB", "DOLAR");
    }
    
    private void contarProdutos() {
    	 int total = produtoDAO.contarProdutos();
    	 contarP.setText(String.valueOf(total));
    }
    
    public Image gerarCodigoDeBarrasImage(String codigo) throws Exception {
        int width = 150;
        int height = 150;

        BitMatrix bitMatrix = new MultiFormatWriter().encode(codigo, BarcodeFormat.CODE_128, width, height);
        BufferedImage bufferedImage = MatrixToImageWriter.toBufferedImage(bitMatrix);

        // Salva a imagem em bytes para armazenar no banco
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        ImageIO.write(bufferedImage, "png", baos);
        imgQrCode = baos.toByteArray(); // ← armazena os bytes em um campo

        return SwingFXUtils.toFXImage(bufferedImage, null); // para exibir no ImageView
    }

    
    @FXML
    private String gerarCodigoBarras() {
        // Gera base no tempo atual
        String codigo = "FPS" + System.currentTimeMillis();
        tfCodigoBarra.setText(codigo);
        
        try {
            Image codigoBarraimg = gerarCodigoDeBarrasImage(codigo);
            imgCodigoBarra.setImage(codigoBarraimg);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return codigo;
    }

    @FXML
    private void fecharJanela() {
        Stage stage = (Stage) btnFechar.getScene().getWindow();
        stage.close();
    }
    
    @FXML
    private void salvarProduto() {
        tfMargem.setText("0");
        tfLucroBruto.setText("0");
        Produto produto = new Produto();
        
        try {
            produto.setNome(tfNomeProduto.getText());
            cambio = Double.parseDouble(tfCambio.getText());
            produto.setPrecoCompra(cambio * Double.parseDouble(tfPrecoCompra.getText()));
            produto.setPrecoVenda(Double.parseDouble(tfPrecoVenda.getText()));
            produto.setPrecoMestre(Double.parseDouble(tfPrecoMestre.getText()));
            produto.setCategoria(tfCategoria.getText());
            produto.setGarantia(tfGarantia.getText());
            produto.setReferencia(tfReferencia.getText());
            produto.setEstoque(Integer.parseInt(tfEstoque.getText()));
            produto.setLoja(tfLoja.getText());
            produto.setFabricante(tfFabricante.getText());
            produto.setFornecedor(tfFornecedor.getText());
            produto.setInfoAdicional(tfInfoAdicional.getText());
            produto.setCodigoBarra(tfCodigoBarra.getText());
            produto.setQrCode(imgQrCode);
            produto.setModelo(tfModelo.getText());
            produto.setCodigo(tfCodigo.getText());
            produto.setCor(choiceCor.getValue());
            produto.setImagem(imgProdutoByte);
        } catch (NumberFormatException e) {
            Alert alerta = new Alert(Alert.AlertType.ERROR);
            alerta.setTitle("Erro");
            alerta.setHeaderText("Erro de Formato");
            alerta.setContentText("Certifique-se de que os valores numéricos foram preenchidos corretamente.");
            alerta.showAndWait();
            return;
        }

        try {
            produtoDAO.salvarProduto(produto);
            carregarProdutosNaTabela();
            carregarCategoriasNoChoiceBox();
            carregarfornecedoresNoChoiceBox();
            limparCampos();
            contarProdutos();

        } catch (Exception e) {
            Alert alerta = new Alert(Alert.AlertType.ERROR);
            alerta.setTitle("Erro");
            alerta.setHeaderText("Erro ao salvar");
            alerta.setContentText("Não foi possível salvar o produto: " + e.getMessage());
            alerta.showAndWait();
        }
    }
    
    private void preencherCamposComProduto(Produto produto) {
    	tfGarantia.setText(produto.getGarantia());
        tfCodigoBarra.setText(produto.getCodigoBarra());
        tfNomeProduto.setText(produto.getNome());
        tfCategoria.setText(produto.getCategoria());
        tfEstoque.setText(String.valueOf(produto.getEstoque()));
        tfPrecoVenda.setText(String.valueOf(produto.getPrecoVenda()));
        tfPrecoMestre.setText(String.valueOf(produto.getPrecoMestre()));
        tfPrecoCompra.setText(String.valueOf(produto.getPrecoCompra()));
        tfReferencia.setText(produto.getReferencia());
        tfLucroBruto.setText(String.valueOf(produto.getLucroBruto()));
        tfLoja.setText(produto.getLoja());
        tfFabricante.setText(String.valueOf(produto.getFabricante()));
        tfInfoAdicional.setText(produto.getInfoAdicional());
        tfMargem.setText(String.valueOf(produto.getMargem()));
        tfFornecedor.setText(produto.getFornecedor());
        estoqueQTD.setText(String.valueOf(produto.getEstoque()));
        tfModelo.setText(produto.getModelo());
        tfCodigo.setText(produto.getCodigo());
        choiceCor.setValue(produto.getCor());

        // Carregar e exibir imagem do banco de dados
        Image imagem = produtoDAO.obterImagemQrCode(produto.getCodigoBarra());
        if (imagem != null) {
            imgCodigoBarra.setImage(imagem);
        } else {
        	Image imagemPadrao = new Image(getClass().getResourceAsStream("/img/semQrCode.png"));
            imgCodigoBarra.setImage(imagemPadrao); // limpa se não houver imagem
        }
        
        try {
            byte[] imagemBytes = produto.getImagem();
            if (imagemBytes != null) {
                ByteArrayInputStream bis = new ByteArrayInputStream(imagemBytes);
                Image imagemP = new Image(bis);
                imgProduto.setImage(imagemP);
            } else {
            	Image imagemPadrao = new Image(getClass().getResourceAsStream("/img/semImg.png"));
            	imgProduto.setImage(imagemPadrao);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    
    public void limparCampos() {
        tfCodigoBarra.clear();
        tfNomeProduto.clear();
        tfCategoria.clear();
        tfEstoque.clear();
        tfPrecoVenda.clear();
        tfPrecoMestre.clear();
        tfPrecoCompra.clear();
        tfReferencia.clear();
        tfMargem.clear();
        tfLucroBruto.clear();
        tfLoja.clear();
        tfGarantia.clear();
        tfFabricante.clear();
        tfFornecedor.clear();
        tfInfoAdicional.clear();
        imgCodigoBarra.setImage(null);
        tfModelo.clear();
        tfCodigo.clear();
        choiceCor.getSelectionModel().clearSelection();
        choiceCategoria.getSelectionModel().clearSelection();
        estoqueQTD.setText("");
        
        Image imagemPadrao = new Image(getClass().getResourceAsStream("/img/inserirFotoProduto.png"));
        imgProduto.setImage(imagemPadrao);
        
        Image imagemPadrao2 = new Image(getClass().getResourceAsStream("/img/semQrCode.png"));
        imgCodigoBarra.setImage(imagemPadrao2);

        // Aplicar fade em TextFields para suavizar a limpeza
        aplicarFadeEmTextField(tfCodigoBarra);
        aplicarFadeEmTextField(tfNomeProduto);
        aplicarFadeEmTextField(tfCategoria);
        aplicarFadeEmTextField(tfEstoque);
        aplicarFadeEmTextField(tfPrecoVenda);
        aplicarFadeEmTextField(tfPrecoMestre);
        aplicarFadeEmTextField(tfPrecoCompra);
        aplicarFadeEmTextField(tfReferencia);
        aplicarFadeEmTextField(tfMargem);
        aplicarFadeEmTextField(tfLucroBruto);
        aplicarFadeEmTextField(tfLoja);
        aplicarFadeEmTextField(tfGarantia);
        aplicarFadeEmTextField(tfFabricante);
        aplicarFadeEmTextField(tfFornecedor);
        aplicarFadeEmTextField(tfInfoAdicional);
        aplicarFadeEmTextField(tfModelo);
        aplicarFadeEmTextField(tfCodigo);
    }
    
    //private Image getImagemPadraoProduto() {
    //    return new Image(getClass().getResourceAsStream("/img/inserirFotoProduto.png"));
    //}

   // private Image getImagemPadraoQrCode() {
    //    return new Image(getClass().getResourceAsStream("/img/semQrCode.png"));
    //}
	
    
    private void carregarProdutosNaTabela() {
        tabelaProdutos.setItems(produtoDAO.listarProdutos2());
    }
    
}