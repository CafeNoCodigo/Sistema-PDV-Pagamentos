package com.minhaloja.sistema_pagamento.controller;

import java.io.File;
import java.io.FileOutputStream;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.YearMonth;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.TreeMap;

import com.itextpdf.text.Document;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import com.minhaloja.sistema_pagamento.dao.VendaDAO;

import javafx.application.Platform;
import javafx.beans.value.ChangeListener;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.Node;
import javafx.scene.chart.BarChart;
import javafx.scene.chart.XYChart;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.DatePicker;
import javafx.scene.control.Label;

public class telaRelatorioController {

	
	@FXML private DatePicker datePicker;
	
	@FXML private Label lbJan, lbFev, lbMar, lbAbr, lbMai, lbJun, lbJul, lbAgo, lbSet, lbOut, lbNov, lbDez;
	
	@FXML private BarChart<String, Number> graficoAnual;
	
	@FXML private Button btnExportarPdf, btnAtualizarGrafico;
	
	@FXML private VendaDAO vendaDAO = new VendaDAO(); 
	
	@FXML
	private void atualizarGrafico() {
	    graficoAnual.getData().clear();

	    XYChart.Series<String, Number> series = new XYChart.Series<>();
	    series.setName("Totais Mensais");

	    Map<String, Label> mapaMeses = Map.of(
	        "Janeiro", lbJan, "Fevereiro", lbFev, "Março", lbMar,
	        "Abril", lbAbr, "Maio", lbMai, "Junho", lbJun,
	        "Julho", lbJul, "Agosto", lbAgo, "Setembro", lbSet,
	        "Outubro", lbOut, "Novembro", lbNov, "Dezembro", lbDez
	    );

	    for (Map.Entry<String, Label> entrada : mapaMeses.entrySet()) {
	        double valor = parse(entrada.getValue());
	        XYChart.Data<String, Number> data = new XYChart.Data<>(entrada.getKey(), valor);
	        series.getData().add(data);
	    }

	    graficoAnual.getData().add(series);

	    // Aplicar estilos APÓS os nós estarem prontos
	    Platform.runLater(() -> {
	        for (XYChart.Data<String, Number> data : series.getData()) {
	            Node node = data.getNode();
	            if (node != null) {
	                double valor = data.getYValue().doubleValue();
	                node.getStyleClass().add(getEstiloBarra(valor));
	            }
	        }
	    });
	}

	private String getEstiloBarra(double valor) {
	    if (valor < 5000) return "barra-baixa";
	    else if (valor < 10000) return "barra-media";
	    else return "barra-alta";
	}

	private double parse(Label label) {
	    try {
	        return Double.parseDouble(label.getText().replace(",", ".").replaceAll("[^\\d.]", ""));
	    } catch (Exception e) {
	        return 0;
	    }
	}


	
	@FXML
	private void exportarTotaisPorMesParaPDF(ActionEvent event) {
	    Document documento = new Document();

	    try {
	        // Caminho fixo
	        String userHome = System.getProperty("user.home");
	        File pastaDestino = new File(userHome, "Desktop/FPS_COMMERCE/RELATÓRIO_DE_VENDAS_ANUAL");
	        if (!pastaDestino.exists()) pastaDestino.mkdirs();

	        String nomeArquivo = "RELATÓRIO_DE_VENDA_DE_" +
	                LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyyMMdd_HHmmss")) + ".pdf";
	        File arquivo = new File(pastaDestino, nomeArquivo);

	        PdfWriter.getInstance(documento, new FileOutputStream(arquivo));
	        documento.open();

	        // Dados agrupados por ano
	        Map<String, Double> totais = vendaDAO.obterTotaisPorMes();
	        Map<Integer, List<MonthTotal>> dadosPorAno = new TreeMap<>();

	        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM");
	        for (Map.Entry<String, Double> entry : totais.entrySet()) {
	            YearMonth ym = YearMonth.parse(entry.getKey(), formatter);
	            int ano = ym.getYear();
	            MonthTotal mt = new MonthTotal(ym, entry.getValue());

	            dadosPorAno.computeIfAbsent(ano, k -> new ArrayList<>()).add(mt);
	        }

	        // Para cada ano, nova página
	        for (Map.Entry<Integer, List<MonthTotal>> anoEntry : dadosPorAno.entrySet()) {
	            if (documento.getPageNumber() > 0) documento.newPage();

	            int ano = anoEntry.getKey();
	            List<MonthTotal> lista = anoEntry.getValue();

	            Font tituloFonte = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 16);
	            Paragraph titulo = new Paragraph("Totais de Venda - Ano " + ano, tituloFonte);
	            titulo.setAlignment(Element.ALIGN_CENTER);
	            documento.add(titulo);
	            documento.add(new Paragraph(" ")); // espaço

	            PdfPTable tabela = new PdfPTable(2);
	            tabela.setWidthPercentage(100);
	            tabela.addCell("Mês");
	            tabela.addCell("Total Vendido (MZN)");

	            double totalAnual = 0.0;
	            DateTimeFormatter mesFormatter = DateTimeFormatter.ofPattern("MMMM", Locale.forLanguageTag("pt-BR"));

	            for (MonthTotal mt : lista) {
	                String nomeMes = capitalize(mt.mes.format(mesFormatter));
	                tabela.addCell(nomeMes);
	                tabela.addCell(String.format("MZN %.2f", mt.total));
	                totalAnual += mt.total;
	            }

	            // Linha de total anual
	            Font boldFont = FontFactory.getFont(FontFactory.HELVETICA_BOLD);
	            PdfPCell celulaTotal = new PdfPCell(new Phrase("Total Anual", boldFont));
	            celulaTotal.setColspan(1);
	            tabela.addCell(celulaTotal);

	            PdfPCell valorTotal = new PdfPCell(new Phrase(String.format("MZN %.2f", totalAnual), boldFont));
	            tabela.addCell(valorTotal);

	            documento.add(tabela);
	        }

	        documento.close();

	        alerta(Alert.AlertType.INFORMATION, "Gerar PDF de Relatório de Vendas",
	                "PDF gerado em:\n" + arquivo.getAbsolutePath());

	    } catch (Exception e) {
	        e.printStackTrace();
	        alerta(Alert.AlertType.ERROR, "Gerar PDF de Relatório de Vendas",
	                "Erro ao gerar PDF:\n" + e.getMessage());
	    }
	}

	
	private static class MonthTotal {
	    YearMonth mes;
	    double total;

	    MonthTotal(YearMonth mes, double total) {
	        this.mes = mes;
	        this.total = total;
	    }
	}
	
	private String capitalize(String texto) {
	    if (texto == null || texto.isEmpty()) return texto;
	    return texto.substring(0, 1).toUpperCase() + texto.substring(1);
	}


	@FXML
	private void initialize() {
		datePicker.getEditor().textProperty().addListener((obs, oldText, newText) -> {
		    try {
		        LocalDate data = datePicker.getConverter().fromString(newText);
		        if (data != null) {
		            int ano = data.getYear();
		            Map<Integer, Double> totais = vendaDAO.buscarTotaisPorMes(ano);
		            limparLabelsTotais();
		            atualizarLabelsTotais(totais);
		        }
		    } catch (Exception ignored) {}
		});
		
		ChangeListener<String> listener = (obs, oldVal, newVal) -> atualizarGrafico();

	    lbJan.textProperty().addListener(listener);
	    lbFev.textProperty().addListener(listener);
	    lbMar.textProperty().addListener(listener);
	    lbAbr.textProperty().addListener(listener);
	    lbMai.textProperty().addListener(listener);
	    lbJun.textProperty().addListener(listener);
	    lbJul.textProperty().addListener(listener);
	    lbAgo.textProperty().addListener(listener);
	    lbSet.textProperty().addListener(listener);
	    lbOut.textProperty().addListener(listener);
	    lbNov.textProperty().addListener(listener);
	    lbDez.textProperty().addListener(listener);

	    atualizarGrafico();
	}
	
	private void limparLabelsTotais() {
	    lbJan.setText("MZN 0.00");
	    lbFev.setText("MZN 0.00");
	    lbMar.setText("MZN 0.00");
	    lbAbr.setText("MZN 0.00");
	    lbMai.setText("MZN 0.00");
	    lbJun.setText("MZN 0.00");
	    lbJul.setText("MZN 0.00");
	    lbAgo.setText("MZN 0.00");
	    lbSet.setText("MZN 0.00");
	    lbOut.setText("MZN 0.00");
	    lbNov.setText("MZN 0.00");
	    lbDez.setText("MZN 0.00");
	}

	private void atualizarLabelsTotais(Map<Integer, Double> totais) {
	    lbJan.setText(String.format("MZN %.2f", totais.getOrDefault(1, 0.0)));
	    lbFev.setText(String.format("MZN %.2f", totais.getOrDefault(2, 0.0)));
	    lbMar.setText(String.format("MZN %.2f", totais.getOrDefault(3, 0.0)));
	    lbAbr.setText(String.format("MZN %.2f", totais.getOrDefault(4, 0.0)));
	    lbMai.setText(String.format("MZN %.2f", totais.getOrDefault(5, 0.0)));
	    lbJun.setText(String.format("MZN %.2f", totais.getOrDefault(6, 0.0)));
	    lbJul.setText(String.format("MZN %.2f", totais.getOrDefault(7, 0.0)));
	    lbAgo.setText(String.format("MZN %.2f", totais.getOrDefault(8, 0.0)));
	    lbSet.setText(String.format("MZN %.2f", totais.getOrDefault(9, 0.0)));
	    lbOut.setText(String.format("MZN %.2f", totais.getOrDefault(10, 0.0)));
	    lbNov.setText(String.format("MZN %.2f", totais.getOrDefault(11, 0.0)));
	    lbDez.setText(String.format("MZN %.2f", totais.getOrDefault(12, 0.0)));
	}
	
	private void alerta(Alert.AlertType tipo, String titulo, String msg) {
        Alert alerta = new Alert(tipo);
        alerta.setTitle(titulo);
        alerta.setHeaderText(null);
        alerta.setContentText(msg);
        alerta.showAndWait();
    }

}
