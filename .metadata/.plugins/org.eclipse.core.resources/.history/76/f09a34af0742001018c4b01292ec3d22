package com.minhaloja.sistema_pagamento.controller;

import java.io.File;
import java.io.FileOutputStream;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Map;

import com.itextpdf.text.Document;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import com.minhaloja.sistema_pagamento.dao.VendaDAO;

import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.Alert;
import javafx.scene.control.DatePicker;
import javafx.scene.control.Label;

public class telaRelatorioController {

	@FXML
	private DatePicker datePicker;

	@FXML
	private Label lbJan, lbFev, lbMar, lbAbr, lbMai, lbJun, lbJul, lbAgo, lbSet, lbOut, lbNov, lbDez;
	
	@FXML private VendaDAO vendaDAO = new VendaDAO(); 
	
	@FXML
	private void exportarTotaisPorMesParaPDF(ActionEvent event) {
	    Document documento = new Document();

	    try {
	        // Caminho fixo: Desktop/FPS_COMMERCE/REQUISICOES
	        String userHome = System.getProperty("user.home");
	        File pastaDestino = new File(userHome, "Desktop/FPS_COMMERCE/REQUISICOES");
	        if (!pastaDestino.exists()) {
	            pastaDestino.mkdirs();
	        }

	        String nomeArquivo = "totais_por_mes_" + LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyyMMdd_HHmmss")) + ".pdf";
	        File arquivo = new File(pastaDestino, nomeArquivo);

	        PdfWriter.getInstance(documento, new FileOutputStream(arquivo));
	        documento.open();

	        // Título
	        Font tituloFonte = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 16);
	        Paragraph titulo = new Paragraph("Totais de Venda por Mês", tituloFonte);
	        titulo.setAlignment(Element.ALIGN_CENTER);
	        documento.add(titulo);
	        documento.add(new Paragraph(" ")); // espaço

	        // Tabela
	        PdfPTable tabela = new PdfPTable(2);
	        tabela.setWidthPercentage(100);
	        tabela.addCell("Mês");
	        tabela.addCell("Total Vendido (MZN)");

	        // Buscar dados
	        Map<String, Double> totaisPorMes = vendaDAO.obterTotaisPorMes();
	        for (Map.Entry<String, Double> entry : totaisPorMes.entrySet()) {
	            tabela.addCell(entry.getKey()); // exemplo: "2025-06"
	            tabela.addCell(String.format("MZN %.2f", entry.getValue()));
	        }

	        documento.add(tabela);
	        documento.close();

	        alerta(Alert.AlertType.INFORMATION, "Gerar PDF do Relatório!", "PDF gerado em:\n" + arquivo.getAbsolutePath());

	    } catch (Exception e) {
	        e.printStackTrace();
	        alerta(Alert.AlertType.ERROR, "Gerar PDF do Relatório!", "Erro ao gerar PDF:\n" + e.getMessage());
	    }
	}


	@FXML
	private void initialize() {
		datePicker.getEditor().textProperty().addListener((obs, oldText, newText) -> {
		    try {
		        LocalDate data = datePicker.getConverter().fromString(newText);
		        if (data != null) {
		            int ano = data.getYear();
		            Map<Integer, Double> totais = vendaDAO.buscarTotaisPorMes(ano);
		            limparLabelsTotais();
		            atualizarLabelsTotais(totais);
		        }
		    } catch (Exception ignored) {}
		});
	}
	
	private void limparLabelsTotais() {
	    lbJan.setText("MZN 0.00");
	    lbFev.setText("MZN 0.00");
	    lbMar.setText("MZN 0.00");
	    lbAbr.setText("MZN 0.00");
	    lbMai.setText("MZN 0.00");
	    lbJun.setText("MZN 0.00");
	    lbJul.setText("MZN 0.00");
	    lbAgo.setText("MZN 0.00");
	    lbSet.setText("MZN 0.00");
	    lbOut.setText("MZN 0.00");
	    lbNov.setText("MZN 0.00");
	    lbDez.setText("MZN 0.00");
	}

	private void atualizarLabelsTotais(Map<Integer, Double> totais) {
	    lbJan.setText(String.format("MZN %.2f", totais.getOrDefault(1, 0.0)));
	    lbFev.setText(String.format("MZN %.2f", totais.getOrDefault(2, 0.0)));
	    lbMar.setText(String.format("MZN %.2f", totais.getOrDefault(3, 0.0)));
	    lbAbr.setText(String.format("MZN %.2f", totais.getOrDefault(4, 0.0)));
	    lbMai.setText(String.format("MZN %.2f", totais.getOrDefault(5, 0.0)));
	    lbJun.setText(String.format("MZN %.2f", totais.getOrDefault(6, 0.0)));
	    lbJul.setText(String.format("MZN %.2f", totais.getOrDefault(7, 0.0)));
	    lbAgo.setText(String.format("MZN %.2f", totais.getOrDefault(8, 0.0)));
	    lbSet.setText(String.format("MZN %.2f", totais.getOrDefault(9, 0.0)));
	    lbOut.setText(String.format("MZN %.2f", totais.getOrDefault(10, 0.0)));
	    lbNov.setText(String.format("MZN %.2f", totais.getOrDefault(11, 0.0)));
	    lbDez.setText(String.format("MZN %.2f", totais.getOrDefault(12, 0.0)));
	}
	
	private void alerta(Alert.AlertType tipo, String titulo, String msg) {
        Alert alerta = new Alert(tipo);
        alerta.setTitle(titulo);
        alerta.setHeaderText(null);
        alerta.setContentText(msg);
        alerta.showAndWait();
    }

}
