package com.minhaloja.sistema_pagamento.controller;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.time.LocalDate;
import java.util.List;

import com.minhaloja.sistema_pagamento.dao.FuncionarioDAO;
import com.minhaloja.sistema_pagamento.model.Funcionario;
import com.minhaloja.sistema_pagamento.model.Produto;

import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ChoiceBox;
import javafx.scene.control.DatePicker;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.stage.FileChooser;
import javafx.stage.Stage;

public class telaCadastroFuncionarioController {
	
	@FXML private TextField tfCodigo;
	@FXML private TextField tfNome;
	@FXML private TextField tfNumeroBi;
	@FXML private TextField tfTelefone1;
	@FXML private TextField tfTelefone2;
	@FXML private TextField tfEndereco;
	@FXML private TextField tfBairro;
	@FXML private TextField tfCidade;
	@FXML private TextField tfNuit;
	@FXML private TextField tfCargo;
	@FXML private TextField tfContaBancaria1;
	@FXML private TextField tfContaBancaria2;
	@FXML private TextField tfSalario;
	@FXML private TextField tfTransporte;
	@FXML private TextField tfAlimentacao;
	@FXML private TextField tfLoja;
	
	@FXML private Button btnSalvar;
	@FXML private Button btnSelecionarImagemFuncionario;
	@FXML private Button btnSelecionarImagemBi;
	@FXML private Button btnLimpar;
	@FXML private Button btnEiminar;
	@FXML private Button btnFechar;
	@FXML private Button btnNovo;
	@FXML private Button btnCancelar;
	
	@FXML private DatePicker dpDataNascido;
	@FXML private DatePicker dpDataInicio;
	@FXML private DatePicker dpDataFim;
	
	@FXML private ImageView imageViewFuncionario;
	@FXML private ImageView imageViewBi;
	
	@FXML private TableView<Funcionario> tabelaFuncionarios;
	
	@FXML private TableColumn<Funcionario, String> colNome;
    @FXML private TableColumn<Funcionario, String> colCargo;
    @FXML private TableColumn<Funcionario, String> colTelefone;
    @FXML private TableColumn<Funcionario, Double> colSalario;
    @FXML private TableColumn<Funcionario, LocalDate> colNascido;
    @FXML private TableColumn<Funcionario, String> colLoja;
    
    @FXML private ChoiceBox<String> choiceFuncionarios;
    
    @FXML private Label contarF;
	
	private byte[] imagemFuncionarioBytes;
	private byte[] imagemBiBytes;
	

	private final FuncionarioDAO funcionarioDAO = new FuncionarioDAO();
	
	private void preencherCamposComFuncionario(Funcionario funcionario) {
    	tfCodigo.setText(String.valueOf(funcionario.getCodigo()));
        tfNome.setText(funcionario.getNome());
        tfNumeroBi.setText(funcionario.getNome());
        tfTelefone1.setText(funcionario.getTelefone1());
        tfTelefone2.setText(funcionario.getTelefone2());
        tfEndereco.setText(funcionario.getEndereco());
        tfBairro.setText(funcionario.getBairro());
        tfCidade.setText(funcionario.getCidade());
        tfNuit.setText(funcionario.getNuit());
        tfCargo.setText(funcionario.getCargo());
        tfContaBancaria1.setText(funcionario.getContaBancaria1());
        tfContaBancaria2.setText(funcionario.getContaBancaria2());
        tfLoja.setText(funcionario.getLoja());
        tfSalario.setText(String.valueOf(funcionario.getSalario()));
        tfTransporte.setText(String.valueOf(funcionario.getTransporte()));
        tfAlimentacao.setText(String.valueOf(funcionario.getAlimentacao()));

        // Carregar e exibir imagem do banco de dados
        Image imagem = funcionarioDAO.obterImagem(funcionario.getImagemFuncionario());
        if (imagem != null) {
        	imageViewFuncionario.setImage(imagem);
        } else {
        	Image imagemPadrao = new Image(getClass().getResourceAsStream("/img/inserirFotoBI.png"));
        	imageViewFuncionario.setImage(imagemPadrao); // limpa se não houver imagem
        }
        
        try {
            byte[] imagemBytes = funcionario.getImagemBi();
            if (imagemBytes != null) {
                ByteArrayInputStream bis = new ByteArrayInputStream(imagemBytes);
                Image imagemP = new Image(bis);
                imageViewBi.setImage(imagemP);
            } else {
            	Image imagemPadrao = new Image(getClass().getResourceAsStream("/img/semImg.png"));
            	imageViewBi.setImage(imagemPadrao);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
	
	@FXML private void carregarFuncionariosChoiceBox() {
        List<String> funcionarios = funcionarioDAO.listarFuncionariosChoiceBox();
        choiceFuncionarios.getItems().setAll(funcionarios);
    }
	
	private void contarFuncionarios() {
   	 int total = funcionarioDAO.contarFuncionarios();
   	 contarF.setText(String.valueOf(total));
   }
	
	@FXML
    private void fecharJanela() {
        Stage stage = (Stage) btnFechar.getScene().getWindow();
        stage.close();
    }
	
	private void carregarFuncionarioTabela() {
        FuncionarioDAO funcionario = new FuncionarioDAO();
        ObservableList<Funcionario> lista = funcionario.listarFuncionarios();
        tabelaFuncionarios.setItems(lista);
    }
	
	@FXML public void excluirFuncionarioSelecionado() {
        Funcionario selecionado = tabelaFuncionarios.getSelectionModel().getSelectedItem();
        
        if (selecionado == null) {
            Alert alerta = new Alert(Alert.AlertType.WARNING);
            alerta.setTitle("Nenhuma seleção");
            alerta.setHeaderText("Nenhum funcionário selecionado");
            alerta.setContentText("Por favor, selecione um funcionário na tabela.");
            alerta.showAndWait();
            return;
        }

        // Confirmação
        Alert confirmacao = new Alert(Alert.AlertType.CONFIRMATION);
        confirmacao.setTitle("Confirmar exclusão");
        confirmacao.setHeaderText("Você tem certeza que deseja excluir este funcionário?");
        confirmacao.setContentText("Funcionário: " + selecionado.getNome());

        // Espera a resposta do usuário
        confirmacao.showAndWait().ifPresent(resposta -> {
            if (resposta == javafx.scene.control.ButtonType.OK) {
                boolean sucesso = funcionarioDAO.excluirFuncionario(selecionado.getNumeroBi());

                if (sucesso) {
                    Alert sucessoAlerta = new Alert(Alert.AlertType.INFORMATION);
                    sucessoAlerta.setTitle("Sucesso");
                    sucessoAlerta.setHeaderText("funcionário excluído com sucesso.");
                    sucessoAlerta.showAndWait();
                    
                    carregarFuncionarioTabela();
                    contarFuncionarios(); 
                    carregarFuncionariosChoiceBox();
                    limparCampos();             
                } else {
                    Alert erro = new Alert(Alert.AlertType.ERROR);
                    erro.setTitle("Erro");
                    erro.setHeaderText("Erro ao excluir funcionário");
                    erro.setContentText("Não foi possível excluir o funcionário.");
                    erro.showAndWait();
                }
            }
        });
    }
	
	@FXML
	public void initialize() {
		colNome.setCellValueFactory(new PropertyValueFactory<>("nome"));
		colCargo.setCellValueFactory(new PropertyValueFactory<>("cargo"));
		colSalario.setCellValueFactory(new PropertyValueFactory<>("salario"));
		colTelefone.setCellValueFactory(new PropertyValueFactory<>("telefone1"));
		colNascido.setCellValueFactory(new PropertyValueFactory<>("dataNascido"));
		colLoja.setCellValueFactory(new PropertyValueFactory<>("loja"));
		
		contarFuncionarios();
		carregarFuncionariosChoiceBox();

		tabelaFuncionarios.setItems(funcionarioDAO.listarFuncionarios());

	}
	
	@FXML
	private void limparCampos() {
		tfCodigo.clear();
		tfNome.clear();
		tfTelefone1.clear();
		tfTelefone2.clear();
		tfNumeroBi.clear();
		tfEndereco.clear();
		tfCidade.clear();
		tfBairro.clear();
		tfContaBancaria1.clear();
		tfContaBancaria2.clear();
		tfNuit.clear();
		tfCargo.clear();
		tfSalario.clear();
		tfAlimentacao.clear();
		tfTransporte.clear();
		tfLoja.clear();
		choiceFuncionarios.getSelectionModel().clearSelection();
		
		Image imagemPadrao = new Image(getClass().getResourceAsStream("/img/inserirFotoBI.png"));
		imageViewFuncionario.setImage(imagemPadrao);
		imageViewBi.setImage(imagemPadrao);
	}
	
	@FXML
	private void selecionarImagemFuncionario() {
	    FileChooser fileChooser = new FileChooser();
	    fileChooser.setTitle("Selecionar Imagem do Funcionário");

	    // Filtros de extensão de imagem
	    fileChooser.getExtensionFilters().addAll(
	        new FileChooser.ExtensionFilter("Imagens", "*.png", "*.jpg", "*.jpeg", "*.jfif")
	    );

	    File file = fileChooser.showOpenDialog(null);
	    if (file != null) {
	        // Exibir a imagem no ImageView (opcional)
	        Image image = new Image(file.toURI().toString());
	        imageViewFuncionario.setImage(image);

	        // Converter imagem para byte[]
	        try (FileInputStream fis = new FileInputStream(file)) {
	            imagemFuncionarioBytes = fis.readAllBytes(); // Java 9+
	        } catch (IOException e) {
	            e.printStackTrace();
	        }
	    }
	}
	
	@FXML
	private void selecionarImagemBi() {
	    FileChooser fileChooser = new FileChooser();
	    fileChooser.setTitle("Selecionar Imagem do BI do Funcionário");

	    // Filtros de extensão de imagem
	    fileChooser.getExtensionFilters().addAll(
	        new FileChooser.ExtensionFilter("Imagens", "*.png", "*.jpg", "*.jpeg", "*.jfif")
	    );

	    File file = fileChooser.showOpenDialog(null);
	    if (file != null) {
	        // Exibir a imagem no ImageView (opcional)
	        Image image = new Image(file.toURI().toString());
	        imageViewBi.setImage(image);

	        // Converter imagem para byte[]
	        try (FileInputStream fis = new FileInputStream(file)) {
	            imagemBiBytes = fis.readAllBytes(); // Java 9+
	        } catch (IOException e) {
	            e.printStackTrace();
	        }
	    }
	}

	
	@FXML
	public void salvarFuncionario() {
	    Funcionario funcionario = new Funcionario();

	    try {
	        funcionario.setNome(tfNome.getText());
	        funcionario.setNumeroBi(tfNumeroBi.getText());
	        if (!tfTelefone1.getText().isEmpty()) {
	            funcionario.setTelefone1(Double.parseDouble(tfTelefone1.getText()));
	        }
	        if (!tfTelefone2.getText().isEmpty()) {
	            funcionario.setTelefone1(Double.parseDouble(tfTelefone2.getText()));
	        }
	        funcionario.setEndereco(tfEndereco.getText());
	        funcionario.setBairro(tfBairro.getText());
	        funcionario.setCidade(tfCidade.getText());
	        funcionario.setSalario(Integer.parseInt(tfSalario.getText()));
	        funcionario.setTransporte(Integer.parseInt(tfTransporte.getText()));
	        funcionario.setAlimentacao(Integer.parseInt(tfAlimentacao.getText()));
	        funcionario.setNuit(tfNuit.getText());
	        funcionario.setCargo(tfCargo.getText());
	        funcionario.setContaBancaria1(tfContaBancaria1.getText());
	        funcionario.setContaBancaria2(tfContaBancaria2.getText());
	        funcionario.setLoja(tfLoja.getText());

	        // Campos opcionais: datas
	        if (dpDataNascido.getValue() != null) {
	            funcionario.setDataNascido(dpDataNascido.getValue());
	        }
	        if (dpDataInicio.getValue() != null) {
	            funcionario.setDataInicio(dpDataInicio.getValue());
	        }
	        if (dpDataFim.getValue() != null) {
	            funcionario.setDataFim(dpDataFim.getValue());
	        }

	        // Imagens
	        funcionario.setImagemFuncionario(imagemFuncionarioBytes);
	        funcionario.setImagemBi(imagemBiBytes);

	        // Código (opcional)
	        if (!tfCodigo.getText().isEmpty()) {
	            funcionario.setCodigo(Double.parseDouble(tfCodigo.getText()));
	        }

	        // Salvar no banco
	        funcionarioDAO.salvarFuncionario(funcionario);
	        funcionario.setImagemFuncionario(imagemFuncionarioBytes);
	        funcionario.setImagemBi(imagemBiBytes);
	        contarFuncionarios(); 
	        carregarFuncionariosChoiceBox();
	        limparCampos();
	        tabelaFuncionarios.setItems(funcionarioDAO.listarFuncionarios());


	    } catch (NumberFormatException e) {
	        Alert alerta = new Alert(Alert.AlertType.ERROR);
	        alerta.setTitle("Erro");
	        alerta.setHeaderText("Erro de Formato");
	        alerta.setContentText("Preencha corretamente os campos numéricos (telefone, salário etc).");
	        alerta.showAndWait();
	    }
	}


}
