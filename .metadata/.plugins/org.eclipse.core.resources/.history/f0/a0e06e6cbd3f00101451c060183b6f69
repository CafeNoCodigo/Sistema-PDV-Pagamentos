package com.minhaloja.sistema_pagamento.dao;

import com.minhaloja.sistema_pagamento.model.Produto;
import com.minhaloja.sistema_pagamento.util.Conexao;

import java.sql.*;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

public class ProdutoEsgotadoDAO {

    public ProdutoEsgotadoDAO() {
        criarTabelaSeNaoExistir();
    }

    private void criarTabelaSeNaoExistir() {
        String sql = """
            CREATE TABLE IF NOT EXISTS produtos_esgotados (
                id INT AUTO_INCREMENT PRIMARY KEY,
                id_produto INT NOT NULL,
                data_esgotado DATE NOT NULL,
                FOREIGN KEY (id_produto) REFERENCES produtos(id)
            );
        """;

        try (Connection conn = Conexao.conectar();
             Statement stmt = conn.createStatement()) {
            stmt.execute(sql);
        } catch (SQLException e) {
            System.err.println("Erro ao criar tabela produtos_esgotados: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * Registra um produto como esgotado, se ainda não estiver registrado.
     * @param idProduto ID do produto
     * @return true se registrado com sucesso, false se já estava registrado ou erro ocorreu
     */
    public boolean registrarProdutoEsgotado(int idProduto) {
        String verificaSql = "SELECT COUNT(*) FROM produtos_esgotados WHERE id_produto = ?";
        String insereSql = "INSERT INTO produtos_esgotados (id_produto, data_esgotado) VALUES (?, ?)";

        try (Connection conn = Conexao.conectar();
             PreparedStatement verificaStmt = conn.prepareStatement(verificaSql)) {

            verificaStmt.setInt(1, idProduto);
            try (ResultSet rs = verificaStmt.executeQuery()) {
                if (rs.next() && rs.getInt(1) > 0) {
                    // Produto já registrado como esgotado
                    return false;
                }
            }

            try (PreparedStatement insereStmt = conn.prepareStatement(insereSql)) {
                insereStmt.setInt(1, idProduto);
                insereStmt.setDate(2, Date.valueOf(LocalDate.now()));
                insereStmt.executeUpdate();
                return true;
            }

        } catch (SQLException e) {
            System.err.println("Erro ao registrar produto esgotado: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }

    /**
     * Lista todos os produtos esgotados (estoque <= 0 ou já registrados como esgotados)
     * @return lista de produtos esgotados
     */
    public List<Produto> listarProdutosEsgotados() {
        List<Produto> produtos = new ArrayList<>();

        String sql = """
            SELECT p.* FROM produtos p
            LEFT JOIN produtos_esgotados pe ON p.id = pe.id_produto
            WHERE p.estoque <= 0 OR pe.id_produto IS NOT NULL
            ORDER BY p.nome
        """;

        try (Connection conn = Conexao.conectar();
             PreparedStatement stmt = conn.prepareStatement(sql);
             ResultSet rs = stmt.executeQuery()) {

            while (rs.next()) {
                Produto p = new Produto();
                p.setId(rs.getInt("id"));
                p.setCodigoBarra(rs.getString("codigoBarra"));
                p.setNome(rs.getString("nome"));
                p.setCategoria(rs.getString("categoria"));
                p.setEstoque(rs.getInt("estoque"));
                p.setPrecoVenda(rs.getDouble("precoVenda"));
                p.setPrecoMestre(rs.getDouble("precoMestre"));
                p.setPrecoCompra(rs.getDouble("precoCompra"));
                p.setReferencia(rs.getString("referencia"));
                p.setLoja(rs.getString("loja"));
                p.setFabricante(rs.getString("fabricante"));
                p.setFornecedor(rs.getString("fornecedor"));
                p.setQrCode(rs.getBytes("imgQrCode"));
                p.setModelo(rs.getString("modelo"));
                p.setCodigo(rs.getString("codigo"));
                p.setGarantia(rs.getString("garantia"));
                p.setCor(rs.getString("cor"));
                p.setInfoAdicional(rs.getString("infoAdicional"));
                p.setImagem(rs.getBytes("imagem"));
                produtos.add(p);
            }

        } catch (SQLException e) {
            System.err.println("Erro ao listar produtos esgotados: " + e.getMessage());
            e.printStackTrace();
        }

        return produtos;
    }
}
