package com.minhaloja.sistema_pagamento.controller;

import java.io.ByteArrayInputStream;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import com.minhaloja.sistema_pagamento.dao.FormaPagamentoDAO;
import com.minhaloja.sistema_pagamento.dao.ItemVendaDAO;
import com.minhaloja.sistema_pagamento.dao.ProdutoDAO;
import com.minhaloja.sistema_pagamento.dao.VendaDAO;
import com.minhaloja.sistema_pagamento.model.FormaPagamento;
import com.minhaloja.sistema_pagamento.model.ItemVenda;
import com.minhaloja.sistema_pagamento.model.Produto;
import com.minhaloja.sistema_pagamento.model.Venda;

import javafx.beans.property.SimpleDoubleProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.stage.Stage;

public class telaVendaController {

    @FXML private TableView<Produto> tabelaProdutos;
    @FXML private TableColumn<Produto, String> colCodigo;
    @FXML private TableColumn<ItemVenda, String> colCodigo2;
    @FXML private TableColumn<Produto, String> colNome;
    @FXML private TableColumn<Produto, Double> colEstoque;
    @FXML private TableColumn<Produto, Double> colPreco;
    @FXML private TableColumn<Produto, Double> colPrecoMestre;
    @FXML private TableColumn<Produto, String> colCategoria;

    @FXML private TableView<ItemVenda> tabelaItensVenda;
    @FXML private TableColumn<ItemVenda, String> colItemNome;
    @FXML private TableColumn<ItemVenda, Integer> colItemQuantidade;
    @FXML private TableColumn<ItemVenda, Double> colItemSubtotal;
    @FXML private TableColumn<ItemVenda, String> colItemCategoria;

    @FXML private Button btnFechar, btnBusca, btnListaTodos, btnAdicionar, btnRemoverItem, btnCancelarVenda, btnLimparItem, btnGerar;
    @FXML private TextField tfBusca, tfConta, tfValorPago;
    @FXML private Label lbPreco, lbTotal, lbTroco;
    @FXML private ImageView imgProduto;
    @FXML private ChoiceBox<FormaPagamento> cbFormaPagamento;

    private final ProdutoDAO produtoDAO = new ProdutoDAO();
    private final VendaDAO vendaDAO = new VendaDAO();
    private final Venda venda = new Venda();
    private final ObservableList<ItemVenda> itensVenda = FXCollections.observableArrayList();

    @FXML
    public void initialize() {
        configurarTabelaProdutos();
        configurarTabelaItensVenda();
        carregarFormasPagamento();
        configurarEventos();
        tabelaProdutos.setItems(produtoDAO.listarProdutos());
    }
    
    @FXML
    private void registrarVenda() {
        if (itensVenda.isEmpty()) {
            alerta(Alert.AlertType.WARNING, "Aviso", "Nenhum item na venda!");
            return;
        }

        double total = calcularTotalVenda(); // já implementado
        String formaPagamento = cbFormaPagamento.getValue();
        double valorPago = Double.parseDouble(tfValorPago.getText());
        double troco = valorPago - total;

        if (valorPago < total) {
            alerta(Alert.AlertType.ERROR, "Erro", "Valor pago insuficiente.");
            return;
        }

        Venda venda = new Venda();
        venda.setData(LocalDate.now());
        venda.setTotalProduto(total);
        venda.setFormaPagamento(formaPagamento);
        venda.setValorPago(valorPago);
        venda.setTroco(troco);
        venda.setItens(new ArrayList<>(itensVenda));

        //VendaDAO vendaDAO = new VendaDAO();
        int vendaId = vendaDAO.inserirVenda(venda); // deve retornar o ID da venda salva

        if (vendaId > 0) {
            ItemVendaDAO itemDAO = new ItemVendaDAO();
            for (ItemVenda item : listaItensVenda) {
                item.setVendaId(vendaId);
                itemDAO.salvarItemVenda(item);

                // Atualiza estoque
                ProdutoDAO produtoDAO = new ProdutoDAO();
                Produto produto = item.getProduto();
                int novoEstoque = produto.getEstoque() - item.getQuantidade();
                produto.setEstoque(novoEstoque);
                produtoDAO.atualizarEstoque(produto);
            }

            alerta(Alert.AlertType.INFORMATION, "Sucesso", "Venda registrada com sucesso!");
            limparCamposVenda();
        } else {
            alerta(Alert.AlertType.ERROR, "Erro", "Erro ao salvar a venda.");
        }
    }


    private void configurarTabelaProdutos() {
        colCodigo.setCellValueFactory(new PropertyValueFactory<>("codigoBarra"));
        colNome.setCellValueFactory(new PropertyValueFactory<>("nome"));
        colEstoque.setCellValueFactory(new PropertyValueFactory<>("estoque"));
        colPreco.setCellValueFactory(new PropertyValueFactory<>("precoVenda"));
        colPrecoMestre.setCellValueFactory(new PropertyValueFactory<>("precoMestre"));
        colCategoria.setCellValueFactory(new PropertyValueFactory<>("categoria"));
    }

    private void configurarTabelaItensVenda() {
        colCodigo2.setCellValueFactory(data -> new SimpleStringProperty(data.getValue().getProduto().getCodigoBarra()));
        colItemNome.setCellValueFactory(data -> new SimpleStringProperty(data.getValue().getNome()));
        colItemQuantidade.setCellValueFactory(new PropertyValueFactory<>("quantidade"));
        colItemSubtotal.setCellValueFactory(data -> new SimpleDoubleProperty(data.getValue().getSubtotal()).asObject());
        colItemCategoria.setCellValueFactory(data -> new SimpleStringProperty(data.getValue().getProduto().getCategoria()));

        tabelaItensVenda.setItems(itensVenda);
    }

    private void configurarEventos() {
        tabelaProdutos.getSelectionModel().selectedItemProperty().addListener((obs, oldVal, newVal) -> exibirDetalhesProduto(newVal));

        cbFormaPagamento.getSelectionModel().selectedItemProperty().addListener((obs, oldVal, selected) -> {
            tfConta.setText(selected != null ? selected.getConta() : "");
        });
    }

    private void exibirDetalhesProduto(Produto produto) {
        if (produto != null) {
            lbPreco.setText(String.format("%.2f", produto.getPrecoVenda()));
            Image imagem = produto.getImagem() != null ? new Image(new ByteArrayInputStream(produto.getImagem()))
                    : new Image(getClass().getResourceAsStream("/img/semImg.png"));
            imgProduto.setImage(imagem);
        } else {
            lbPreco.setText("");
            imgProduto.setImage(new Image(getClass().getResourceAsStream("/img/semImg.png")));
        }
    }

    private void carregarFormasPagamento() {
        List<FormaPagamento> formasPagamento = new FormaPagamentoDAO().buscarTodas();
        if (formasPagamento != null) {
            cbFormaPagamento.getItems().addAll(formasPagamento);
        }
    }

    @FXML
    private void adicionarProdutoAVenda() {
        Produto produtoSelecionado = tabelaProdutos.getSelectionModel().getSelectedItem();
        if (produtoSelecionado == null) return;

        for (ItemVenda item : itensVenda) {
            if (item.getProduto().getCodigoBarra().equals(produtoSelecionado.getCodigoBarra())) {
                item.incrementarQuantidade();
                venda.adicionarPreco(produtoSelecionado.getPrecoVenda());
                tabelaItensVenda.refresh();
                atualizarTotal();
                return;
            }
        }

        ItemVenda novoItem = new ItemVenda(produtoSelecionado);
        itensVenda.add(novoItem);
        venda.adicionarPreco(produtoSelecionado.getPrecoVenda());
        atualizarTotal();
    }

    @FXML
    private void removerItemSelecionado() {
        ItemVenda item = tabelaItensVenda.getSelectionModel().getSelectedItem();
        if (item == null) return;

        if (item.getQuantidade() > 1) {
            item.decrementarQuantidade();
            venda.adicionarPreco(-item.getProduto().getPrecoVenda());
        } else {
            itensVenda.remove(item);
            venda.adicionarPreco(-item.getProduto().getPrecoVenda());
        }

        tabelaItensVenda.refresh();
        atualizarTotal();
    }

    @FXML
    private void limparItemSelecionado() {
        ItemVenda item = tabelaItensVenda.getSelectionModel().getSelectedItem();
        if (item == null) return;

        if (confirmar("Remover Item", "Deseja remover completamente o item \"" + item.getNome() + "\" da venda?")) {
            venda.adicionarPreco(-item.getSubtotal());
            itensVenda.remove(item);
            atualizarTotal();
        }
    }

    @FXML
    private void cancelarVenda() {
        if (confirmar("Cancelar Venda", "Tem certeza de que deseja cancelar a venda atual?")) {
            itensVenda.clear();
            venda.resetar();
            atualizarTotal();
        }
    }

    @FXML
    private void verificarPagamento() {
        tfValorPago.setStyle("");
        lbTroco.setText("0,00");

        if (venda.getTotalProduto() == 0.0) {
            alerta("Adicione produtos ao carrinho antes de realizar o pagamento.");
            return;
        }

        String texto = tfValorPago.getText().trim();
        if (texto.isEmpty()) {
            destacarErro(tfValorPago);
            alerta("Por favor, preencha o valor pago.");
            return;
        }

        try {
            double valorPago = Double.parseDouble(texto);
            if (valorPago < venda.getTotalProduto()) {
                destacarErro(tfValorPago);
                alerta("O valor pago é inferior ao total da venda.");
                return;
            }

            double troco = valorPago - venda.getTotalProduto();
            venda.setValorPago(valorPago);
            venda.setTroco(troco);
            lbTroco.setText(String.format("%.2f", troco));

        } catch (NumberFormatException e) {
            destacarErro(tfValorPago);
            alerta("O valor pago deve ser numérico.");
        }
    }

    @FXML
    private void buscarProduto() {
        String textoBusca = tfBusca.getText().trim();
        tabelaProdutos.setItems(textoBusca.isEmpty() ? produtoDAO.listarProdutos()
                : produtoDAO.buscarProdutosPorTexto(textoBusca));
    }

    @FXML
    private void listarTodos() {
        tabelaProdutos.setItems(produtoDAO.listarProdutos());
    }

    @FXML
    private void fecharJanela() {
        ((Stage) btnFechar.getScene().getWindow()).close();
    }

    private void atualizarTotal() {
        lbTotal.setText(String.format("MZN$ %.2f", venda.getTotalProduto()));
    }

    private void alerta(String msg) {
        Alert alerta = new Alert(Alert.AlertType.WARNING);
        alerta.setTitle("Aviso");
        alerta.setHeaderText(null);
        alerta.setContentText(msg);
        alerta.showAndWait();
    }

    private boolean confirmar(String titulo, String msg) {
        Alert alerta = new Alert(Alert.AlertType.CONFIRMATION);
        alerta.setTitle(titulo);
        alerta.setHeaderText(null);
        alerta.setContentText(msg);
        Optional<ButtonType> resultado = alerta.showAndWait();
        return resultado.isPresent() && resultado.get() == ButtonType.OK;
    }

    private void destacarErro(TextField campo) {
        campo.setStyle("-fx-border-color: red; -fx-border-width: 2px;");
    }
}