package com.minhaloja.sistema_pagamento.controller;

import java.time.LocalDate;
import java.util.List;

import com.minhaloja.sistema_pagamento.dao.ContaAPagarDAO;
import com.minhaloja.sistema_pagamento.model.ContaAPagar;

import javafx.fxml.FXML;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.DatePicker;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.stage.Stage;

public class TelaContasAPagarController {

    
    @FXML private TextField tfDescricao, tfFornecedor, tfValor;
    
    @FXML private DatePicker dpDataEmissao, dpDataVencimento, dpDataPagamento;
    
    @FXML private ComboBox<String> cbFormaPagamento;
    
    @FXML private Button btnSalvar, btnLimpar, btnFechar, btnPagar, btnPDF, btnEliminar;
    
    @FXML private TableView<ContaAPagar> tabelaContasAPagar;
    
    @FXML private TableColumn<String, ContaAPagar> colDescricao, colValor, colFormaPagamento;
    @FXML private TableColumn<LocalDate, ContaAPagar> colDataEmissao, colDataVencimento, colDataPagamento;
    
    public void initialize() {
        colDescricao.setCellValueFactory(new PropertyValueFactory<>("descricao"));
        colValor.setCellValueFactory(new PropertyValueFactory<>("valor"));
        colFormaPagamento.setCellValueFactory(new PropertyValueFactory<>("formaPagamento"));
        colDataEmissao.setCellValueFactory(new PropertyValueFactory<>("dataEmissao"));
        colDataVencimento.setCellValueFactory(new PropertyValueFactory<>("dataVencimento"));
        colDataPagamento.setCellValueFactory(new PropertyValueFactory<>("dataPagamento"));

        listarContas(); // carrega ao iniciar
    }

    
    @FXML
    private void salvarConta() {
        ContaAPagar conta = new ContaAPagar();
        conta.setDescricao(tfDescricao.getText());
        conta.setFornecedor(tfFornecedor.getText());
        conta.setValor(Double.parseDouble(tfValor.getText()));
        conta.setDataEmissao(dpDataEmissao.getValue());
        conta.setDataVencimento(dpDataVencimento.getValue());
        conta.setDataPagamento(dpDataPagamento.getValue());
        conta.setFormaPagamento(cbFormaPagamento.getValue());
        conta.setPaga(dpDataPagamento.getValue() != null);

        ContaAPagarDAO dao = new ContaAPagarDAO();
        if (dao.inserir(conta)) {
            listarContas(); // atualiza a tabela
            limparCampos();
            mostrarAlerta("Conta salva com sucesso!", Alert.AlertType.INFORMATION);
        } else {
            mostrarAlerta("Erro ao salvar conta!", Alert.AlertType.ERROR);
        }
    }
    
    @FXML
    private void eliminarConta() {
        ContaAPagar selecionada = tabelaContasAPagar.getSelectionModel().getSelectedItem();
        if (selecionada != null) {
            ContaAPagarDAO dao = new ContaAPagarDAO();
            if (dao.deletar(selecionada.getId())) {
                listarContas();
                mostrarAlerta("Conta eliminada com sucesso!", Alert.AlertType.INFORMATION);
            } else {
                mostrarAlerta("Erro ao eliminar conta!", Alert.AlertType.ERROR);
            }
        } else {
            mostrarAlerta("Selecione uma conta na tabela para eliminar.", Alert.AlertType.WARNING);
        }
    }
    
    @FXML
    private void listarContas() {
        ContaAPagarDAO dao = new ContaAPagarDAO();
        List<ContaAPagar> lista = dao.listarTodas();
        tabelaContasAPagar.getItems().setAll(lista);
    }
    
    @FXML
    private void fecharJanela() {
        Stage stage = (Stage) btnFechar.getScene().getWindow();
        stage.close();
    }



    
    @FXML
    private void limparCampos() {
        tfDescricao.clear();
        tfFornecedor.clear();
        tfValor.clear();
        dpDataEmissao.setValue(null);
        dpDataVencimento.setValue(null);
        dpDataPagamento.setValue(null);
        cbFormaPagamento.getSelectionModel().clearSelection();
    }

    private void mostrarAlerta(String mensagem, Alert.AlertType tipo) {
        Alert alert = new Alert(tipo);
        alert.setHeaderText(null);
        alert.setContentText(mensagem);
        alert.showAndWait();
    }


}
