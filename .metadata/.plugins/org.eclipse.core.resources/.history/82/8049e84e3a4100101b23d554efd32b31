package com.minhaloja.sistema_pagamento.controller;

import java.time.LocalDate;
import java.util.List;

import com.minhaloja.sistema_pagamento.dao.ItemVendaDAO;
import com.minhaloja.sistema_pagamento.model.ItemVenda;

import javafx.animation.Animation;
import javafx.animation.ScaleTransition;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.transformation.FilteredList;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.ChoiceBox;
import javafx.scene.control.ComboBox;
import javafx.scene.control.DatePicker;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.input.MouseEvent;
import javafx.stage.Stage;
import javafx.util.Duration;

public class telaFluxoCaixaController {

	@FXML private TableView<ItemVenda> tabelaFluxoCaixa;
	@FXML private TableColumn<ItemVenda, String> colCodigo, colNome, colCategoria, colReferencia, colFornecedor, colModelo, colCor, colLoja;
	@FXML private TableColumn<ItemVenda, Integer> colQTD;
	@FXML private TableColumn<ItemVenda, Double> colPrecoVenda;
	@FXML private TableColumn<ItemVenda, LocalDate> colData;
	@FXML private TableColumn<ItemVenda, String> colFormaPagamento;
	@FXML private TableColumn<ItemVenda, String> colFuncionario;
	
	@FXML private ComboBox<String> comboCategoria;
	
	@FXML private Button btnFechar, btnLimparFiltro;
	
	@FXML private ChoiceBox<String> cbCategoria;
	
	@FXML private TextField tfPesquisa;
	
	@FXML private Label lbTotalDia;
    @FXML private Label lbTotalMes;
    @FXML private Label lbTotalAno;
    @FXML private Label lbTotalEntrada;
    
    @FXML private DatePicker datePicker;
	
	private ObservableList<ItemVenda> listaOriginalItemVenda;

	private final ItemVendaDAO itemVendaDAO = new ItemVendaDAO();
    
    @FXML
    private void initialize() {
    	colCodigo.setCellValueFactory(new PropertyValueFactory<>("codigoBarra"));
        colNome.setCellValueFactory(new PropertyValueFactory<>("nome"));
        colCategoria.setCellValueFactory(new PropertyValueFactory<>("categoria"));
        colQTD.setCellValueFactory(new PropertyValueFactory<>("quantidade"));
        colPrecoVenda.setCellValueFactory(new PropertyValueFactory<>("subtotal"));
        colFornecedor.setCellValueFactory(new PropertyValueFactory<>("fornecedor"));
        colModelo.setCellValueFactory(new PropertyValueFactory<>("modelo"));
        colReferencia.setCellValueFactory(new PropertyValueFactory<>("referencia"));
        colCor.setCellValueFactory(new PropertyValueFactory<>("cor"));
        colLoja.setCellValueFactory(new PropertyValueFactory<>("loja"));
        colData.setCellValueFactory(new PropertyValueFactory<>("data"));
        colFormaPagamento.setCellValueFactory(new PropertyValueFactory<>("formaPagamento"));
        colFuncionario.setCellValueFactory(new PropertyValueFactory<>("idCaixa"));;
        
        carregarItensVenda();
        carregarCategorias();
        
        FilteredList<ItemVenda> filteredData = new FilteredList<>(listaOriginalItemVenda, p -> true);
        tabelaFluxoCaixa.setItems(filteredData);
        
        tfPesquisa.textProperty().addListener((obs, antigo, novo) -> {
            String texto = novo == null ? "" : novo.trim().toLowerCase();
            filteredData.setPredicate(item -> {
                // Se o texto for vazio, exibe tudo
                if (texto.isEmpty()) {
                    return true;
                }
                
                String nomeProduto = item.getNome().toLowerCase();
                String codigoBarra = item.getCodigoBarra().toLowerCase();
                String ref = item.getReferencia().toLowerCase();
                String loja = item.getLoja().toLowerCase();

                return nomeProduto.contains(texto) || codigoBarra.contains(texto) || ref.contains(texto) || loja.contains(texto);
            });
        });
        aplicarAnimacoesComponentes();

        comboCategoria.setOnAction(e -> {
            String categoriaSelecionada = comboCategoria.getValue();
            filteredData.setPredicate(item -> {
                // Se nenhuma categoria selecionada, deixa apenas filtro de texto:
                String texto = tfPesquisa.getText() == null ? "" : tfPesquisa.getText().trim().toLowerCase();

                boolean combinaTexto = texto.isEmpty()
                    || item.getNome().toLowerCase().contains(texto)
                    || item.getCodigoBarra().toLowerCase().contains(texto);

                if (categoriaSelecionada == null || categoriaSelecionada.isEmpty()) {
                    return combinaTexto;
                }
                // Se categoria definida, aplica também filtro de categoria
                boolean mesmaCategoria = item.getCategoria() != null
                    && item.getCategoria().equalsIgnoreCase(categoriaSelecionada);

                return combinaTexto && mesmaCategoria;
            });
        });
        
        btnLimparFiltro.setOnAction(e -> {
            comboCategoria.getSelectionModel().clearSelection();
            tfPesquisa.clear();
            filteredData.setPredicate(item -> true);
        });

    }
    
    @FXML
    private void filtrarPorData() {
        LocalDate dataSelecionada = datePicker.getValue();

        if (dataSelecionada == null) return;
        
        VendaDAO vendaDAO = new VendaDAO();
        double totalDia = vendaDAO.obterTotalPorData(dataSelecionada);
        double totalMes = vendaDAO.obterTotalPorMes(dataSelecionada);
        double totalAno = vendaDAO.obterTotalPorAno(dataSelecionada);
        double totalEntrada = vendaDAO.obterEntradaPorData(dataSelecionada);

        lbTotalDia.setText(String.format("%.2f", totalDia));
        lbTotalMes.setText(String.format("%.2f", totalMes));
        lbTotalAno.setText(String.format("%.2f", totalAno));
        lbTotalEntrada.setText(String.format("%.2f", totalEntrada));
    }
    
    public void carregarCategorias() {
        List<String> categorias = itemVendaDAO.listarCategoriasUnicas();
        comboCategoria.setItems(FXCollections.observableArrayList(categorias));
    }
    
    public void carregarItensVenda() {
        listaOriginalItemVenda = FXCollections.observableArrayList(new ItemVendaDAO().buscarItensComProdutoEVenda());
        tabelaFluxoCaixa.setItems(listaOriginalItemVenda);
    }
    
    @FXML
    private void limparFiltroCategoria() {
    	
    }
    
    @FXML
    private void fecharJanela() {
        Stage stage = (Stage) btnFechar.getScene().getWindow();
        stage.close();
    }
    
    private void aplicarAnimacoesComponentes() {
        
        btnFechar.addEventHandler(MouseEvent.MOUSE_ENTERED, e -> {
            ScaleTransition scaleUp = new ScaleTransition(Duration.millis(200), btnFechar);
            scaleUp.setToX(1.05);
            scaleUp.setToY(1.05);
            scaleUp.play();
        });

        btnFechar.addEventHandler(MouseEvent.MOUSE_EXITED, e -> {
            ScaleTransition scaleDown = new ScaleTransition(Duration.millis(200), btnFechar);
            scaleDown.setToX(1.0);
            scaleDown.setToY(1.0);
            scaleDown.play();
        });

        // Efeito pulse contínuo
        ScaleTransition pulse = new ScaleTransition(Duration.seconds(1.5), btnFechar);
        pulse.setFromX(1.0);
        pulse.setFromY(1.0);
        pulse.setToX(1.03);
        pulse.setToY(1.03);
        pulse.setCycleCount(Animation.INDEFINITE);
        pulse.setAutoReverse(true);
        pulse.play();
    }

}
