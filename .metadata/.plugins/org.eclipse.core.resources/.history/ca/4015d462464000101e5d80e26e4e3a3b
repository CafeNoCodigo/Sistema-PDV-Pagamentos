package com.minhaloja.sistema_pagamento.controller;

import java.io.ByteArrayInputStream;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import com.minhaloja.sistema_pagamento.dao.*;
import com.minhaloja.sistema_pagamento.model.*;

import javafx.beans.property.SimpleDoubleProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.stage.Stage;

public class telaVendaController {

    // --- Componentes da UI ---
    @FXML private TableView<Produto> tabelaProdutos;
    @FXML private TableView<ItemVenda> tabelaItensVenda;

    @FXML private TableColumn<Produto, String> colCodigo;
    @FXML private TableColumn<ItemVenda, String> colCodigo2;
    @FXML private TableColumn<Produto, String> colNome;
    @FXML private TableColumn<Produto, Double> colEstoque;
    @FXML private TableColumn<Produto, Double> colPreco;
    @FXML private TableColumn<Produto, Double> colPrecoMestre;
    @FXML private TableColumn<Produto, String> colCategoria;

    @FXML private TableColumn<ItemVenda, String> colItemNome;
    @FXML private TableColumn<ItemVenda, Integer> colItemQuantidade;
    @FXML private TableColumn<ItemVenda, Double> colItemSubtotal;
    @FXML private TableColumn<ItemVenda, String> colItemCategoria;

    @FXML private Button btnFecharCaixa, btnAbrirCaixa, btnFechar, btnBusca, btnListaTodos, btnAdicionar, btnRemoverItem, btnCancelarVenda, btnLimparItem, btnGerar, btnRegistrarVenda;
    @FXML private TextField tfBusca, tfConta, tfValorPago;
    @FXML private Label lbPreco, lbTotal, lbTroco;
    @FXML private ImageView imgProduto;
    @FXML private ChoiceBox<FormaPagamento> cbFormaPagamento;

    // --- Objetos auxiliares ---
    private final ProdutoDAO produtoDAO = new ProdutoDAO();
    private final ObservableList<ItemVenda> itensVenda = FXCollections.observableArrayList();
    private final Venda venda = new Venda();
    private CaixaDAO caixaDAO = new CaixaDAO();

    @FXML
    public void initialize() {
        configurarTabelaProdutos();
        configurarTabelaItensVenda();
        carregarFormasPagamento();
        configurarEventos();
        listarTodos();
        
        boolean aberto = caixaDAO.isCaixaAberto();
        btnAbrirCaixa.setDisable(aberto);
        btnFecharCaixa.setDisable(!aberto);
    }

    // --- Tabelas ---
    private void configurarTabelaProdutos() {
        colCodigo.setCellValueFactory(new PropertyValueFactory<>("codigoBarra"));
        colNome.setCellValueFactory(new PropertyValueFactory<>("nome"));
        colEstoque.setCellValueFactory(new PropertyValueFactory<>("estoque"));
        colPreco.setCellValueFactory(new PropertyValueFactory<>("precoVenda"));
        colPrecoMestre.setCellValueFactory(new PropertyValueFactory<>("precoMestre"));
        colCategoria.setCellValueFactory(new PropertyValueFactory<>("categoria"));
    }

    private void configurarTabelaItensVenda() {
        colCodigo2.setCellValueFactory(data -> new SimpleStringProperty(data.getValue().getProduto().getCodigoBarra()));
        colItemNome.setCellValueFactory(data -> new SimpleStringProperty(data.getValue().getNome()));
        colItemQuantidade.setCellValueFactory(new PropertyValueFactory<>("quantidade"));
        colItemSubtotal.setCellValueFactory(data -> new SimpleDoubleProperty(data.getValue().getSubtotal()).asObject());
        colItemCategoria.setCellValueFactory(data -> new SimpleStringProperty(data.getValue().getProduto().getCategoria()));

        tabelaItensVenda.setItems(itensVenda);
    }

    // --- Eventos ---
    private void configurarEventos() {
        tabelaProdutos.getSelectionModel().selectedItemProperty().addListener(
            (obs, oldVal, newVal) -> exibirDetalhesProduto(newVal));

        cbFormaPagamento.getSelectionModel().selectedItemProperty().addListener(
            (obs, oldVal, selected) -> tfConta.setText(selected != null ? selected.getConta() : ""));
    }
    
    @FXML
    private void abrirCaixa() {
        // Se já existir um caixa aberto, avisa e sai
        if (caixaDAO.isCaixaAberto()) {
            alerta(Alert.AlertType.INFORMATION, "Aviso", "Já existe um caixa aberto.");
            return;
        }

        double valorAbertura = 0.0;

        Caixa caixa = new Caixa();
        caixa.setDataHoraAbertura(LocalDateTime.now());
        caixa.setValorAbertura(valorAbertura);
        caixa.setAberto(true);

        int idCaixa = caixaDAO.abrirCaixa(caixa);  // agora retorna o ID
        if (idCaixa > 0) {
            alerta(Alert.AlertType.INFORMATION, "Sucesso", "Caixa aberto com sucesso. ID: " + idCaixa);
            btnAbrirCaixa.setDisable(true);
            btnFecharCaixa.setDisable(false);

        } else {
            alerta(Alert.AlertType.ERROR, "Erro", "Falha ao abrir o caixa.");
        }
    }


    @FXML
    private void fecharCaixa() {
        // Verifica se há caixa aberto
        if (!caixaDAO.isCaixaAberto()) {
            alerta(Alert.AlertType.INFORMATION, "Aviso", "Não há caixa aberto para fechar.");
            return;
        }

        // Soma vendas desde a abertura do caixa
        double valorFechamento = caixaDAO.calcularValorTotalVendasCaixaAtual();
        int contadorVendas = caixaDAO.contarVendasCaixaAtual();

        boolean sucesso = caixaDAO.fecharCaixa(valorFechamento, contadorVendas);
        if (sucesso) {
            String valorFormatado = String.format("%.2f", valorFechamento);
            alerta(Alert.AlertType.INFORMATION, "Sucesso", "Caixa fechado com sucesso. Valor total: MZN " + valorFormatado);
            btnAbrirCaixa.setDisable(false);
            btnFecharCaixa.setDisable(true);
        } else {
            alerta(Alert.AlertType.ERROR, "Erro", "Falha ao fechar o caixa.");
        }
    }
    
    @FXML
    private void adicionarProdutoAVenda() {
        Produto produto = tabelaProdutos.getSelectionModel().getSelectedItem();
        if (produto == null) return;

        for (ItemVenda item : itensVenda) {
            if (item.getProduto().getCodigoBarra().equals(produto.getCodigoBarra())) {
                if (item.getQuantidade() >= produto.getEstoque()) {
                    alerta(Alert.AlertType.WARNING, "Estoque insuficiente", 
                        "Não é possível adicionar mais unidades. Estoque disponível: " + produto.getEstoque());
                    return;
                }

                item.incrementarQuantidade();
                venda.adicionarPreco(produto.getPrecoVenda());
                tabelaItensVenda.refresh();
                atualizarTotal();
                return;
            }
        }

        if (produto.getEstoque() <= 0) {
            alerta(Alert.AlertType.WARNING, "Produto esgotado", 
                "O produto selecionado está com estoque zerado.");
            return;
        }

        habilitarBtn();
        
        ItemVenda novoItem = new ItemVenda(produto);
        
        itensVenda.add(novoItem);
        
        venda.adicionarPreco(produto.getPrecoVenda());
        
        atualizarTotal();
    }

    @FXML
    private void removerItemSelecionado() {
        ItemVenda item = tabelaItensVenda.getSelectionModel().getSelectedItem();
        if (item == null) return;

        venda.adicionarPreco(-item.getProduto().getPrecoVenda());
        if (item.getQuantidade() > 1) {
            item.decrementarQuantidade();
        } else {
            itensVenda.remove(item);
        }

        tabelaItensVenda.refresh();
        atualizarTotal();
    }

    @FXML
    private void limparItemSelecionado() {
        ItemVenda item = tabelaItensVenda.getSelectionModel().getSelectedItem();
        if (item == null) return;

        if (confirmar("Remover Item", "Deseja remover completamente o item \"" + item.getNome() + "\" da venda?")) {
            venda.adicionarPreco(-item.getSubtotal());
            itensVenda.remove(item);
            atualizarTotal();
        }
    }

    @FXML
    private void cancelarVenda() {
        if (confirmar("Cancelar Venda", "Tem certeza de que deseja cancelar a venda atual?")) {
            itensVenda.clear();
            venda.resetar();
            atualizarTotal();
            desabilitarBtn();
        }
    }

    @FXML
    private void verificarPagamento() {
        tfValorPago.setStyle("");
        lbTroco.setText("0,00");

        if (venda.getTotalProduto() == 0.0) {
            alerta("Adicione produtos ao carrinho antes de realizar o pagamento.");
            return;
        }

        String texto = tfValorPago.getText().trim();
        if (texto.isEmpty()) {
            destacarErro(tfValorPago);
            alerta("Por favor, preencha o valor pago.");
            return;
        }

        try {
            double valorPago = Double.parseDouble(texto);
            if (valorPago < venda.getTotalProduto()) {
                destacarErro(tfValorPago);
                alerta("O valor pago é inferior ao total da venda.");
                return;
            }

            double troco = valorPago - venda.getTotalProduto();
            venda.setValorPago(valorPago);
            venda.setTroco(troco);
            lbTroco.setText(String.format("%.2f", troco));
        } catch (NumberFormatException e) {
            destacarErro(tfValorPago);
            alerta("O valor pago deve ser numérico.");
        }
    }

    @FXML
    private void registrarVenda() throws SQLException {
        if (itensVenda.isEmpty()) {
            alerta(Alert.AlertType.WARNING, "Aviso", "Nenhum item na venda!");
            return;
        }

        double total = venda.getTotalProduto();
        FormaPagamento forma = cbFormaPagamento.getValue();
        if (forma == null) {
            alerta(Alert.AlertType.ERROR, "Erro", "Selecione uma forma de pagamento.");
            return;
        }

        double valorPago;
        try {
            valorPago = Double.parseDouble(tfValorPago.getText());
        } catch (NumberFormatException e) {
            alerta(Alert.AlertType.ERROR, "Erro", "Valor pago inválido.");
            return;
        }

        if (valorPago < total) {
            alerta(Alert.AlertType.ERROR, "Erro", "Valor pago insuficiente.");
            return;
        }

        // ⚠️ Buscar o ID do caixa aberto ANTES de salvar a venda
        int idCaixaAtual = caixaDAO.buscarIdCaixaAberto();
        if (idCaixaAtual <= 0) {
            alerta(Alert.AlertType.ERROR, "Erro", "Nenhum caixa aberto para associar à venda.");
            return;
        }

        // Preencher venda
        venda.setData(LocalDate.now());
        venda.setTotalProduto(total);
        venda.setFormaPagamento(forma.getNome());
        venda.setValorPago(valorPago);
        venda.setTroco(valorPago - total);
        venda.setItens(new ArrayList<>(itensVenda));
        venda.setIdCaixa(idCaixaAtual); // ✅ Agora sim

        // Verifica se os produtos têm ID válido
        for (ItemVenda item : itensVenda) {
            Produto produto = item.getProduto();
            if (produto.getId() <= 0) {
                alerta(Alert.AlertType.ERROR, "Erro", "Produto '" + produto.getNome() + "' está sem ID válido!");
                return;
            }
        }

        // Salva a venda
        VendaDAO vendaDAO = new VendaDAO();
        int vendaId = vendaDAO.inserirVenda(venda);
        if (vendaId <= 0) {
            alerta(Alert.AlertType.ERROR, "Erro", "Erro ao salvar a venda.");
            return;
        }

        try {
            vendaDAO.inserirItensVenda(vendaId, venda.getItens());
        } catch (SQLException e) {
            alerta(Alert.AlertType.ERROR, "Erro", "Erro ao salvar itens da venda: " + e.getMessage());
            return;
        }

        // Atualiza estoque
        for (ItemVenda item : itensVenda) {
            Produto produto = item.getProduto();
            int novoEstoque = produto.getEstoque() - item.getQuantidade();
            if (!produtoDAO.atualizarEstoque(produto.getCodigoBarra(), novoEstoque)) {
                alerta(Alert.AlertType.ERROR, "Erro", "Erro ao atualizar estoque do produto: " + produto.getNome());
                return;
            }
        }

        // Incrementa contador de vendas do caixa
        caixaDAO.incrementarContadorVendas();

        alerta(Alert.AlertType.INFORMATION, "Sucesso", "Venda registrada com sucesso!");
        limparCamposVenda();
        listarTodos();
        desabilitarBtn();
    }




    // --- Utilitários ---
    private void atualizarTotal() {
        lbTotal.setText(String.format("MZN$ %.2f", venda.getTotalProduto()));
    }

    private void exibirDetalhesProduto(Produto produto) {
        if (produto != null) {
            lbPreco.setText(String.format("%.2f", produto.getPrecoVenda()));
            Image imagem = produto.getImagem() != null
                    ? new Image(new ByteArrayInputStream(produto.getImagem()))
                    : new Image(getClass().getResourceAsStream("/img/semImg.png"));
            imgProduto.setImage(imagem);
        } else {
            lbPreco.setText("");
            imgProduto.setImage(new Image(getClass().getResourceAsStream("/img/semImg.png")));
        }
    }

    private void carregarFormasPagamento() {
        List<FormaPagamento> formas = new FormaPagamentoDAO().buscarTodas();
        if (formas != null) {
            cbFormaPagamento.getItems().setAll(formas);
        }
    }

    @FXML
    private void buscarProduto() {
        String texto = tfBusca.getText().trim();
        tabelaProdutos.setItems(texto.isEmpty()
                ? produtoDAO.listarProdutos()
                : produtoDAO.buscarProdutosPorTexto(texto));
    }

    @FXML
    private void listarTodos() {
        tabelaProdutos.setItems(produtoDAO.listarProdutos());
    }

    @FXML
    private void fecharJanela() {
        Stage stage = (Stage) btnFechar.getScene().getWindow();
        stage.close();
    }

    private void limparCamposVenda() {
        itensVenda.clear();
        venda.resetar();

        tfValorPago.clear();
        tfConta.clear();
        lbTotal.setText("0.00");
        lbTroco.setText("0.00");
        lbPreco.setText("");
        imgProduto.setImage(new Image(getClass().getResourceAsStream("/img/semImg.png")));
    }

    private void alerta(String msg) {
        alerta(Alert.AlertType.WARNING, "Aviso", msg);
    }

    private void alerta(Alert.AlertType tipo, String titulo, String msg) {
        Alert alerta = new Alert(tipo);
        alerta.setTitle(titulo);
        alerta.setHeaderText(null);
        alerta.setContentText(msg);
        alerta.showAndWait();
    }

    private boolean confirmar(String titulo, String msg) {
        Alert alerta = new Alert(Alert.AlertType.CONFIRMATION);
        alerta.setTitle(titulo);
        alerta.setHeaderText(null);
        alerta.setContentText(msg);
        Optional<ButtonType> resultado = alerta.showAndWait();
        return resultado.isPresent() && resultado.get() == ButtonType.OK;
    }

    private void destacarErro(TextField campo) {
        campo.setStyle("-fx-border-color: red; -fx-border-width: 2px;");
    }
    
    private void habilitarBtn() {
    	btnRemoverItem.setDisable(false);
        btnCancelarVenda.setDisable(false);
        btnLimparItem.setDisable(false);
    }
    
    private void desabilitarBtn() {
    	btnRemoverItem.setDisable(true);
        btnCancelarVenda.setDisable(true);        
        btnLimparItem.setDisable(true);
    }
}
