package com.minhaloja.sistema_pagamento.controller;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.ResourceBundle;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

import javafx.application.Platform;
import javafx.scene.control.Alert;

import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.minhaloja.sistema_pagamento.dao.CaixaDAO;
import com.minhaloja.sistema_pagamento.dao.FuncionarioDAO;
import com.minhaloja.sistema_pagamento.util.LanguageManager;
import com.minhaloja.sistema_pagamento.util.NotificacaoSistema;
import com.minhaloja.sistema_pagamento.util.WindowManager;

import javafx.animation.*;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.ChoiceBox;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.input.MouseEvent;
import javafx.stage.Stage;
import javafx.util.Duration;

public class telaInicialController {

    @FXML private Button btnFechar;
    @FXML private Button btnAtualizar;
    
    @FXML private ChoiceBox<String> choiceFuncionario;
    @FXML private Label labelAnimada, lbConfig;

    private final FuncionarioDAO funcionarioDAO = new FuncionarioDAO();
    private final CaixaDAO caixaDAO = new CaixaDAO();

    private final String textoAnimado = "F P S  ";
    private int indiceTexto = 0;
    private Timeline timeline;
    
    @FXML private ComboBox<String> comboIdioma;

    @FXML
    public void initialize() {
        carregarFuncionariosNoChoiceBox();
        iniciarAnimacaoLabel();
        aplicarAnimacoesComponentes();
     
    	String msg = "EXISTE UM CAIXA AINDA ABERTO!";
    	popUp(msg);	
    	
    	comboIdioma.getItems().addAll("Português", "English", "Français");
        comboIdioma.setValue("Português");

        comboIdioma.setOnAction(e -> {
            String selected = comboIdioma.getValue();
            @SuppressWarnings("deprecation")
			Locale locale = switch (selected) {
                case "English" -> new Locale("en");
                case "Français" -> new Locale("fr");
                default -> new Locale("pt");
            };
            LanguageManager.setLocale(locale);
            WindowManager.reloadCurrentScene(); // método que recarrega a tela atual
        });
        
        ResourceBundle bundle = LanguageManager.getBundle();
        lbConfig.setText(bundle.getString("label.config"));
     
    }
    
    @SuppressWarnings("deprecation")
	private final Map<String, Locale> idiomas = Map.of(
    	    "Português", new Locale("pt", "BR"),
    	    "Inglês", new Locale("en", "US"),
    	    "Francês", new Locale("fr", "FR")
    	);
    
    private static final String VERSAO_ATUAL = "1.0.2";
    private static final String LINK_UPDATE_JSON = "https://drive.google.com/uc?export=download&id=1p12uHbdTUm_SzGXaoCXAlhVebUOmBDk6";

    public void verificarAtualizacao() {
        new Thread(() -> {
            try {
                JsonObject updateInfo = baixarUpdateJson(LINK_UPDATE_JSON);
                String novaVersao = updateInfo.get("versao").getAsString();
                String urlArquivo = updateInfo.get("url_arquivo").getAsString();

                if (VERSAO_ATUAL.equals(novaVersao)) {
                    mostrarMensagem("Atualização", "Você já está na versão mais recente: " + VERSAO_ATUAL);
                    return;
                }

                mostrarMensagem("Atualização", "Nova versão disponível: " + novaVersao + "\nBaixando atualização...");

                String zipPath = "atualizacao.zip";
                baixarArquivo(urlArquivo, zipPath);
                descompactar(zipPath, ".");

                Files.deleteIfExists(Paths.get(zipPath));
                mostrarMensagem("Atualização", "Atualização concluída! O app será reiniciado.");
                Thread.sleep(1500);
                reiniciarAplicativo();
            } catch (Exception e) {
                e.printStackTrace();
                mostrarMensagem("Erro", "Erro ao atualizar: " + e.getMessage());
            }
        }).start();
    }

    @SuppressWarnings("deprecation")
	private JsonObject baixarUpdateJson(String url) throws IOException {
        try (InputStream is = new URL(url).openStream();
             InputStreamReader isr = new InputStreamReader(is);
             BufferedReader reader = new BufferedReader(isr)) {
            return JsonParser.parseReader(reader).getAsJsonObject();
        }
    }

    @SuppressWarnings("deprecation")
	private void baixarArquivo(String url, String destino) throws IOException {
        try (InputStream in = new URL(url).openStream()) {
            Files.copy(in, Paths.get(destino), StandardCopyOption.REPLACE_EXISTING);
        }
    }

    private void descompactar(String zipFilePath, String destino) throws IOException {
        try (ZipInputStream zis = new ZipInputStream(new FileInputStream(zipFilePath))) {
            ZipEntry entry;
            while ((entry = zis.getNextEntry()) != null) {
                File novoArquivo = new File(destino, entry.getName());
                if (entry.isDirectory()) {
                    novoArquivo.mkdirs();
                } else {
                    new File(novoArquivo.getParent()).mkdirs();
                    try (FileOutputStream fos = new FileOutputStream(novoArquivo)) {
                        byte[] buffer = new byte[1024];
                        int len;
                        while ((len = zis.read(buffer)) > 0) {
                            fos.write(buffer, 0, len);
                        }
                    }
                }
                zis.closeEntry();
            }
        }
    }

    private void reiniciarAplicativo() {
        try {
            String caminho = new File(telaInicialController.class.getProtectionDomain().getCodeSource().getLocation().toURI()).getPath();
            if (caminho.endsWith(".exe")) {
                new ProcessBuilder(caminho).start();
            } else if (caminho.endsWith(".jar")) {
                new ProcessBuilder("java", "-jar", caminho).start();
            } else {
                mostrarMensagem("Erro", "Formato de aplicação desconhecido.");
                return;
            }
            System.exit(0);
        } catch (Exception e) {
            e.printStackTrace();
            mostrarMensagem("Erro", "Falha ao reiniciar o app: " + e.getMessage());
        }
    }

    private void mostrarMensagem(String titulo, String mensagem) {
        Platform.runLater(() -> {
            Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setTitle(titulo);
            alert.setHeaderText(null);
            alert.setContentText(mensagem);
            alert.showAndWait();
        });
    }

       /* private void fecharApp() {
            fecharJanela();
        }

        private void relancarApp() {
            fecharApp();
        }*/

    private void iniciarAnimacaoLabel() {
        
        timeline = new Timeline(
            new KeyFrame(Duration.millis(600), e -> {
                if (indiceTexto <= textoAnimado.length()) {
                    labelAnimada.setText(textoAnimado.substring(0, indiceTexto));
                    indiceTexto++;
                } else {
                    indiceTexto = 0;
                    labelAnimada.setText("");
                }
            })
        );
        timeline.setCycleCount(Animation.INDEFINITE);
        timeline.play();
    }

    private void aplicarAnimacoesComponentes() {
        
        btnFechar.addEventHandler(MouseEvent.MOUSE_ENTERED, e -> {
            ScaleTransition scaleUp = new ScaleTransition(Duration.millis(200), btnFechar);
            scaleUp.setToX(1.05);
            scaleUp.setToY(1.05);
            scaleUp.play();
        });

        btnFechar.addEventHandler(MouseEvent.MOUSE_EXITED, e -> {
            ScaleTransition scaleDown = new ScaleTransition(Duration.millis(200), btnFechar);
            scaleDown.setToX(1.0);
            scaleDown.setToY(1.0);
            scaleDown.play();
        });

        // Efeito pulse contínuo
        ScaleTransition pulse = new ScaleTransition(Duration.seconds(1.5), btnFechar);
        pulse.setFromX(1.0);
        pulse.setFromY(1.0);
        pulse.setToX(1.03);
        pulse.setToY(1.03);
        pulse.setCycleCount(Animation.INDEFINITE);
        pulse.setAutoReverse(true);
        pulse.play();
    }

    @FXML
    private void carregarFuncionariosNoChoiceBox() {
        List<String> nomes = funcionarioDAO.listarFuncionariosChoiceBox();
        choiceFuncionario.getItems().setAll(nomes);
    }

    @FXML
    private void fecharJanela() {
    	if (caixaDAO.isCaixaAberto()) {
        	String msg = "EXISTE UM CAIXA AINDA ABERTO!";
            NotificacaoSistema notificacao = new NotificacaoSistema();
            notificacao.mostrarNotificacaoPopUp(msg);
        }
        Stage stage = (Stage) btnFechar.getScene().getWindow();
        stage.close();

        // Finaliza a aplicação completamente
        javafx.application.Platform.exit();
        System.exit(0);
    }
    
    public void abrirTelaCadastroCliente() {
    	WindowManager.abrirTelaCadastroCliente();
    }
    
    public void abrirTelaFormaPagamento() {
        WindowManager.abrirTelaFormaPagamento();
    }

    public void abrirTelaCadastroProduto2() {
        WindowManager.abrirTelaCadastroProduto();
    }

    public void abrirTelaFluxoCaixa2() {
        WindowManager.abrirTelaFluxoCaixa();
    }

    public void abrirTelaCadastroFuncionario2() {
        WindowManager.abrirTelaCadastroFuncionario();
    }

    public void abrirTelaVenda2() {
        WindowManager.abrirTelaVenda();
    }

    public void abrirTelaEstoqueAtual2() {
        WindowManager.abrirTelaEstoqueAtual();
    }

    public void abrirTelaRelatorio2() {
        WindowManager.abrirTelaRelatorio();
    }

    public void abrirTelaRequisicao2() {
        WindowManager.abrirTelaRequisicao();
    }
    
	public void abrirTelaCadastroEmpresa() {
		WindowManager.abrirTelaCadastroEmpresa();
	}
	
	public void abrirTelaCadastroEquipamento() {
		WindowManager.abrirTelaCadastroEquipamento();
	}
	
	public void abrirTelaCadastroContaAPagar() {
		WindowManager.abrirTelaCadastroContaAPagar();
	}
	
	public void abrirTelaCadastroServico() {
		WindowManager.abrirTelaCadastroServico();
	}
    
    private void popUp(String msg) {
    	if (caixaDAO.isCaixaAberto()) {
            NotificacaoSistema notificacao = new NotificacaoSistema();
            notificacao.mostrarNotificacaoPopUp(msg);
        }
    }
}
