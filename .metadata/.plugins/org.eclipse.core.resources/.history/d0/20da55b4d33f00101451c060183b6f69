package com.minhaloja.sistema_pagamento.dao;

import com.minhaloja.sistema_pagamento.model.Caixa;
import com.minhaloja.sistema_pagamento.util.Conexao;

import java.sql.*;
import java.time.LocalDateTime;

public class CaixaDAO {

    public CaixaDAO() {
        criarTabelaSeNaoExistir();
    }
    
    public void incrementarContadorVendas() {
        String sql = """
            UPDATE caixa
            SET contador_vendas = contador_vendas + 1
            WHERE aberto = TRUE
            ORDER BY id DESC
            LIMIT 1
        """;

        try (Connection conn = Conexao.conectar();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.executeUpdate();
        } catch (SQLException e) {
            System.err.println("Erro ao incrementar contador de vendas: " + e.getMessage());
        }
    }


    private void criarTabelaSeNaoExistir() {
        String sql = """
            CREATE TABLE IF NOT EXISTS caixa (
                id INT AUTO_INCREMENT PRIMARY KEY,
                dataHoraAbertura DATETIME NOT NULL,
                dataHoraFechamento DATETIME,
                valorAbertura DOUBLE NOT NULL,
                valorFechamento DOUBLE,
                aberto BOOLEAN NOT NULL DEFAULT TRUE,
                contator_vendas INT NOT NULL
            );
        """;

        try (Connection conn = Conexao.conectar();
             Statement stmt = conn.createStatement()) {
            stmt.execute(sql);
        } catch (SQLException e) {
            System.err.println("Erro ao criar tabela caixa: " + e.getMessage());
        }
    }

    public boolean abrirCaixa(Caixa caixa) {
        String sql = "INSERT INTO caixa (dataHoraAbertura, valorAbertura, aberto) VALUES (?, ?, ?)";

        try (Connection conn = Conexao.conectar();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setTimestamp(1, Timestamp.valueOf(caixa.getDataHoraAbertura()));
            stmt.setDouble(2, caixa.getValorAbertura());
            stmt.setBoolean(3, true);
            return stmt.executeUpdate() > 0;
        } catch (SQLException e) {
            System.err.println("Erro ao abrir caixa: " + e.getMessage());
            return false;
        }
    }

    public boolean fecharCaixa(double valorFechamento) {
        String sql = """
            UPDATE caixa
            SET dataHoraFechamento = ?, valorFechamento = ?, aberto = FALSE
            WHERE aberto = TRUE
            ORDER BY id DESC LIMIT 1;
        """;

        try (Connection conn = Conexao.conectar();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setTimestamp(1, Timestamp.valueOf(LocalDateTime.now()));
            stmt.setDouble(2, valorFechamento);
            return stmt.executeUpdate() > 0;
        } catch (SQLException e) {
            System.err.println("Erro ao fechar caixa: " + e.getMessage());
            return false;
        }
    }

    public boolean isCaixaAberto() {
        String sql = "SELECT COUNT(*) FROM caixa WHERE aberto = TRUE";

        try (Connection conn = Conexao.conectar();
             PreparedStatement stmt = conn.prepareStatement(sql);
             ResultSet rs = stmt.executeQuery()) {
            return rs.next() && rs.getInt(1) > 0;
        } catch (SQLException e) {
            System.err.println("Erro ao verificar status do caixa: " + e.getMessage());
            return false;
        }
    }
}