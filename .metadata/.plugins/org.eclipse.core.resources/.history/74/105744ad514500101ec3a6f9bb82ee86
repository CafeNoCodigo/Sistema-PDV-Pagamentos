package com.minhaloja.sistema_pagamento.controller;

import java.io.File;
import java.io.FileOutputStream;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

import com.itextpdf.text.Document;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import com.minhaloja.sistema_pagamento.dao.EmpresaDAO;
import com.minhaloja.sistema_pagamento.model.Empresa;

import javafx.animation.ScaleTransition;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.Cursor;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.effect.DropShadow;
import javafx.stage.Stage;
import javafx.util.Duration;

public class TelaCadastroEmpresaController {

	@FXML private Button btnFechar, btnLimpar, btnSalvar, btnEliminar, btnExportar;
	
	@FXML private TextField tfNome, tfContacto, tfEmail, tfServico;
	
	@FXML private TableView<Empresa> tabelaEmpresas;
	
	@FXML private TableColumn<Empresa, String> colNome, colContacto, colEmail, colServico;
	
	private final EmpresaDAO empresaDAO = new EmpresaDAO();
	
	@FXML
	private void initialize() {
		colNome.setCellValueFactory(new PropertyValueFactory<>("nome"));
		colContacto.setCellValueFactory(new PropertyValueFactory<>("contacto"));
		colEmail.setCellValueFactory(new PropertyValueFactory<>("email"));
		colServico.setCellValueFactory(new PropertyValueFactory<>("servico"));
		
		tabelaEmpresas.setItems(empresaDAO.listarEmpresas());
		
		configurarBotaoAnimado(btnFechar);
		configurarBotaoAnimado(btnLimpar);
		configurarBotaoAnimado(btnSalvar);
		configurarBotaoAnimado(btnEliminar);
		configurarBotaoAnimado(btnExportar);
	}
	
	@FXML
    private void exportarParaPDF(ActionEvent event) {
		
		// Confirma√ß√£o
        Alert confirmacao = new Alert(Alert.AlertType.CONFIRMATION);
        confirmacao.setTitle("Confirmar exclus√£o");
        confirmacao.setHeaderText("Voc√™ tem certeza que deseja Exportar PDF da lista de Empresas?");

        // Espera a resposta do usu√°rio
        confirmacao.showAndWait().ifPresent(resposta -> {
            if (resposta == javafx.scene.control.ButtonType.OK) {
            	Document documento = new Document();
                try {
                    // Local que ser√° salvo
                    String userHome = System.getProperty("user.home");
                    File pastaDestino = new File(userHome, "Desktop/FPS_COMMERCE/EMPRESAS_CADASTRADAS");
                    if (!pastaDestino.exists()) {
                        pastaDestino.mkdirs();
                    }

                    String nomeArquivo = "Empresas Cadastradas _" + LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd_HH-mm-ss")) + ".pdf";
                    File arquivo = new File(pastaDestino, nomeArquivo);

                    PdfWriter.getInstance(documento, new FileOutputStream(arquivo));
                    documento.open();

                    Font fonteNegrito = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 16);
                    Paragraph titulo = new Paragraph("Empresas Cadastradas", fonteNegrito);
                    titulo.setAlignment(Element.ALIGN_CENTER); 
                    documento.add(titulo);
                    documento.add(new Paragraph(" "));

                    PdfPTable tabela = new PdfPTable(4);
                    tabela.setWidthPercentage(100);

                    tabela.addCell("Nome");
                    tabela.addCell("contacto");
                    tabela.addCell("email");
                    tabela.addCell("servico");

                    for (Empresa empresa : tabelaEmpresas.getItems()) {
                        tabela.addCell(empresa.getNome());
                        tabela.addCell(empresa.getContacto());
                        tabela.addCell(empresa.getEmail());
                        tabela.addCell(empresa.getServico());
                    }

                    documento.add(tabela);
                    documento.close();
                    alerta(Alert.AlertType.INFORMATION, "Gerar PDF de Estoque", "PDF salvo em: " + arquivo.getAbsolutePath());

                } catch (Exception e) {
                    e.printStackTrace();
                    alerta(Alert.AlertType.ERROR, "Gerar PDF de Estoque", "Erro ao gerar PDF: " + e.getMessage());
                }
            }
        });
        
    }
	
	@FXML
	private void excluirEmpresas() {
		Empresa selecionado = tabelaEmpresas.getSelectionModel().getSelectedItem();
		        
	        if (selecionado == null) {
	            alerta(Alert.AlertType.WARNING, "Nenhuma sele√ß√£o", "Por favor, selecione uma Empresa na tabela.");
	            return;
	        }
	
	        // Confirma√ß√£o
	        Alert confirmacao = new Alert(Alert.AlertType.CONFIRMATION);
	        confirmacao.setTitle("Confirmar exclus√£o");
	        confirmacao.setHeaderText("Voc√™ tem certeza que deseja excluir esta Empresa?");
	        confirmacao.setContentText("Empresa: " + selecionado.getNome());
	
	        // Espera a resposta do usu√°rio
	        confirmacao.showAndWait().ifPresent(resposta -> {
	            if (resposta == javafx.scene.control.ButtonType.OK) {
	                boolean sucesso = empresaDAO.excluirEmpresas(selecionado.getNome());
	
	                if (sucesso) {
	                    alerta(Alert.AlertType.INFORMATION, "Sucesso", "Produto exclu√≠do com sucesso.");    
	                    carregarEmpresas();
	                    limparCampos();             
	                } else {
	                    alerta(Alert.AlertType.ERROR, "Erro ao excluir produto", "N√£o foi poss√≠vel excluir o produto.");
	                }
	            }
	        });
    }

    @FXML
    private void fecharJanela() {
        Stage stage = (Stage) btnFechar.getScene().getWindow();
        stage.close();
    }
    
    @FXML
    private void limparCampos() {
    	tfNome.clear();
    	tfContacto.clear();
    	tfEmail.clear();
    	tfServico.clear();
    }
    
    @FXML
    private void salvarEmpresa() {
    	if(tfNome.getText().matches("")) {
    		alerta(Alert.AlertType.ERROR, "Erro", "Insira o Nome da Empresa");
    		return;
    	}else if(tfContacto.getText().matches("")) {
    		alerta(Alert.AlertType.ERROR, "Erro", "Insira o Contacto da Empresa");
    		return;
    	}else if(tfEmail.getText().matches("")){
    		alerta(Alert.AlertType.ERROR, "Erro", "Insira o Email da Empresa");
    		return;
    	}else if(!(tfEmail.getText().matches("^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+$"))) {
    		alerta(Alert.AlertType.INFORMATION, "Erro", "Insira o Email da Empresa de forma correcta");
    		return;
    	}else if(tfServico.getText().matches("")) {
    		alerta(Alert.AlertType.INFORMATION, "Aviso", "A empresa ser√° cadastrada sem informa√ß√µes\nde servi√ßo.");
    	}
    	Empresa empresa = new Empresa();
    	
    	empresa.setNome(tfNome.getText());
    	empresa.setContacto(tfContacto.getText());
    	empresa.setEmail(tfEmail.getText());
    	empresa.setServico(tfServico.getText());
    	
    	boolean sucesso = empresaDAO.inserirEmpresa(empresa);
    	
    	if(sucesso) {
    		alerta(Alert.AlertType.INFORMATION, "Sucesso", "Empresa Cadastrada com sucesso");
    		limparCampos();
    		carregarEmpresas();
    	} else {
    		alerta(Alert.AlertType.INFORMATION, "Erro", "Falha ao Cadastrar a Empresa");
    	}
    }
    
    private void carregarEmpresas() {
		ObservableList<Empresa> listaEmpresa = empresaDAO.listarEmpresas();
		tabelaEmpresas.setItems(listaEmpresa);
    }
    
    private void alerta(Alert.AlertType tipo, String titulo, String msg) {
    	Alert alerta = new Alert(tipo);
    	alerta.setTitle(titulo);
    	alerta.setHeaderText(null);
    	alerta.setContentText(msg);
    	alerta.showAndWait();
    }
    
    // üñ±Ô∏è Efeito hover em bot√µes
    private void configurarBotaoAnimado(Button btn) {
        DropShadow shadow = new DropShadow();

        btn.setOnMouseEntered(e -> {
            btn.setEffect(shadow);
            btn.setCursor(Cursor.HAND);
            ScaleTransition st = new ScaleTransition(Duration.millis(150), btn);
            st.setToX(1.05);
            st.setToY(1.05);
            st.play();
        });

        btn.setOnMouseExited(e -> {
            btn.setEffect(null);
            btn.setCursor(Cursor.DEFAULT);
            ScaleTransition st = new ScaleTransition(Duration.millis(150), btn);
            st.setToX(1.0);
            st.setToY(1.0);
            st.play();
        });
    }
}
