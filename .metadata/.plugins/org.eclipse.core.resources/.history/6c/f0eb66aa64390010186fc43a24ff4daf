package com.minhaloja.sistema_pagamento.controller;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;

import com.minhaloja.sistema_pagamento.dao.FuncionarioDAO;
import com.minhaloja.sistema_pagamento.model.Funcionario;

import javafx.fxml.FXML;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.DatePicker;
import javafx.scene.control.TextField;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.stage.FileChooser;

public class telaCadastroFuncionarioController {
	
	@FXML private TextField tfCodigo;
	@FXML private TextField tfNome;
	@FXML private TextField tfNumeroBi;
	@FXML private TextField tfTelefone1;
	@FXML private TextField tfTelefone2;
	@FXML private TextField tfEndereco;
	@FXML private TextField tfBairro;
	@FXML private TextField tfCidade;
	@FXML private TextField tfNuit;
	@FXML private TextField tfCargo;
	@FXML private TextField tfContaBancaria1;
	@FXML private TextField tfContaBancaria2;
	@FXML private TextField tfSalario;
	@FXML private TextField tfTransporte;
	@FXML private TextField tfAlimentacao;
	@FXML private TextField tfLoja;
	
	@FXML private Button btnSalvar;
	@FXML private Button btnSelecionarImagemFuncionario;
	
	@FXML private DatePicker dpDataNascido;
	@FXML private DatePicker dpDataInicio;
	@FXML private DatePicker dpDataFim;
	
	@FXML private ImageView imageViewFuncionario;
	@FXML private ImageView imageViewBi;
	
	private byte[] imagemFuncionarioBytes;
	private byte[] imagemBiBytes;

	private final FuncionarioDAO funcionarioDAO = new FuncionarioDAO();
	
	@FXML
	private void selecionarImagemFuncionario() {
	    FileChooser fileChooser = new FileChooser();
	    fileChooser.setTitle("Selecionar Imagem do Funcionário");

	    // Filtros de extensão de imagem
	    fileChooser.getExtensionFilters().addAll(
	        new FileChooser.ExtensionFilter("Imagens", "*.png", "*.jpg", "*.jpeg", "*.jfif")
	    );

	    File file = fileChooser.showOpenDialog(null);
	    if (file != null) {
	        // Exibir a imagem no ImageView (opcional)
	        Image image = new Image(file.toURI().toString());
	        imageViewFuncionario.setImage(image);

	        // Converter imagem para byte[]
	        try (FileInputStream fis = new FileInputStream(file)) {
	            imagemFuncionarioBytes = fis.readAllBytes(); // Java 9+
	        } catch (IOException e) {
	            e.printStackTrace();
	        }
	    }
	}
	
	@FXML
	private void selecionarImagemBi() {
	    FileChooser fileChooser = new FileChooser();
	    fileChooser.setTitle("Selecionar Imagem do BI do Funcionário");

	    // Filtros de extensão de imagem
	    fileChooser.getExtensionFilters().addAll(
	        new FileChooser.ExtensionFilter("Imagens", "*.png", "*.jpg", "*.jpeg", "*.jfif")
	    );

	    File file = fileChooser.showOpenDialog(null);
	    if (file != null) {
	        // Exibir a imagem no ImageView (opcional)
	        Image image = new Image(file.toURI().toString());
	        imageViewBi.setImage(image);

	        // Converter imagem para byte[]
	        try (FileInputStream fis = new FileInputStream(file)) {
	            imagemBiBytes = fis.readAllBytes(); // Java 9+
	        } catch (IOException e) {
	            e.printStackTrace();
	        }
	    }
	}

	
	@FXML
	public void salvarFuncionario() {
	    Funcionario funcionario = new Funcionario();

	    try {
	        funcionario.setNome(tfNome.getText());
	        funcionario.setNumeroBi(tfNumeroBi.getText());
	        if (!tfTelefone1.getText().isEmpty()) {
	            funcionario.setTelefone1(Double.parseDouble(tfTelefone1.getText()));
	        }
	        if (!tfTelefone2.getText().isEmpty()) {
	            funcionario.setTelefone1(Double.parseDouble(tfTelefone2.getText()));
	        }
	        funcionario.setEndereco(tfEndereco.getText());
	        funcionario.setBairro(tfBairro.getText());
	        funcionario.setCidade(tfCidade.getText());
	        funcionario.setSalario(Integer.parseInt(tfSalario.getText()));
	        funcionario.setTransporte(Integer.parseInt(tfTransporte.getText()));
	        funcionario.setAlimentacao(Integer.parseInt(tfAlimentacao.getText()));
	        funcionario.setNuit(tfNuit.getText());
	        funcionario.setCargo(tfCargo.getText());
	        funcionario.setContaBancaria1(tfContaBancaria1.getText());
	        funcionario.setContaBancaria2(tfContaBancaria2.getText());
	        funcionario.setLoja(tfLoja.getText());

	        // Campos opcionais: datas
	        if (dpDataNascido.getValue() != null) {
	            funcionario.setDataNascido(dpDataNascido.getValue());
	        }
	        if (dpDataInicio.getValue() != null) {
	            funcionario.setDataInicio(dpDataInicio.getValue());
	        }
	        if (dpDataFim.getValue() != null) {
	            funcionario.setDataFim(dpDataFim.getValue());
	        }

	        // Imagens
	        funcionario.setImagemFuncionario(imagemFuncionarioBytes); // deve ser um byte[] já carregado
	        funcionario.setImagemBi(imagemBiBytes); // idem

	        // Código (opcional)
	        if (!tfCodigo.getText().isEmpty()) {
	            funcionario.setCodigo(Double.parseDouble(tfCodigo.getText()));
	        }

	        // Salvar no banco
	        funcionarioDAO.salvarFuncionario(funcionario);
	        funcionario.setImagemFuncionario(imagemFuncionarioBytes);
	        funcionario.setImagemBi(imagemBiBytes);



	    } catch (NumberFormatException e) {
	        Alert alerta = new Alert(Alert.AlertType.ERROR);
	        alerta.setTitle("Erro");
	        alerta.setHeaderText("Erro de Formato");
	        alerta.setContentText("Preencha corretamente os campos numéricos (telefone, salário etc).");
	        alerta.showAndWait();
	    }
	}


}
