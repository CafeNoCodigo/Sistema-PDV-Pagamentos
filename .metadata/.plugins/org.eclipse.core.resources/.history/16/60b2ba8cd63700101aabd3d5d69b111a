package com.minhaloja.sistema_pagamento.controller;

import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;

import java.awt.image.BufferedImage;

import com.minhaloja.sistema_pagamento.dao.ProdutoDAO;
import com.minhaloja.sistema_pagamento.model.Produto;

import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;

import com.google.zxing.BarcodeFormat;
import com.google.zxing.MultiFormatWriter;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.client.j2se.MatrixToImageWriter;

import javafx.embed.swing.SwingFXUtils;

public class telaCadastroProdutoController {

	@FXML private VBox formulario;
	@FXML private TextField tfNomeProduto;
    @FXML private TextField tfPrecoCompra;
    @FXML private TextField tfPrecoVenda;
    @FXML private TextField tfPrecoMestre;
    @FXML private TextField tfMargem;
    @FXML private TextField tfLucroBruto;
    @FXML private TextField tfCategoria;
    @FXML private TextField tfGarantia;
    @FXML private TextField tfReferencia;
    @FXML private TextField tfEstoque;
    @FXML private TextField tfLoja;
    @FXML private TextField tfFabricante;
    @FXML private TextField tfFornecedor;
    @FXML private TextField tfInfoAdicional;
    @FXML private TextField tfCodigoBarra;
    
    @FXML public TableView<Produto> tabelaProdutos;
    @FXML private TableColumn<Produto, String> colCodigoBarra;
    @FXML private TableColumn<Produto, String> colNome;
    @FXML private TableColumn<Produto, String> colCategoria;
    @FXML private TableColumn<Produto, Double> colEstoque;
    @FXML private TableColumn<Produto, Double> colPrecoVenda;
    @FXML private TableColumn<Produto, Double> colPrecoMestre;
    @FXML private TableColumn<Produto, Double> colPrecoCompra;
    @FXML private TableColumn<Produto, Double> colReferencia;
    
    @FXML private Button btnFechar;
    @FXML private Button btnNovo;
    @FXML private Button btnGerar;
    
    @FXML private ImageView imgCodigoBarra;
    
    private final ProdutoDAO produtoDAO = new ProdutoDAO();
    
    public Image gerarCodigoDeBarrasImage(String codigo) throws Exception {
        int width = 150;
        int height = 150;

        BitMatrix bitMatrix = new MultiFormatWriter().encode(codigo, BarcodeFormat.CODE_128, width, height);
        BufferedImage bufferedImage = MatrixToImageWriter.toBufferedImage(bitMatrix);
        return SwingFXUtils.toFXImage(bufferedImage, null);
    }
    
    @FXML
    private void gerarCodigoBarras() {
        // Gera base no tempo atual
        String codigo = "SRG" + System.currentTimeMillis();
        tfCodigoBarra.setText(codigo);
        
        try {
            Image codigoBarraimg = gerarCodigoDeBarrasImage(codigo);
            imgCodigoBarra.setImage(codigoBarraimg);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @FXML
    private void fecharJanela() {
        Stage stage = (Stage) btnFechar.getScene().getWindow();
        stage.close();
    }


    @FXML
    private void salvarProduto() {
        Produto produto = new Produto();

        try {
            produto.setNome(tfNomeProduto.getText());
            produto.setPrecoCompra(Double.parseDouble(tfPrecoCompra.getText()));
            produto.setPrecoVenda(Double.parseDouble(tfPrecoVenda.getText()));
            produto.setPrecoMestre(Double.parseDouble(tfPrecoMestre.getText()));
            produto.setMargem(Double.parseDouble(tfMargem.getText()));
            produto.setLucroBruto(Double.parseDouble(tfLucroBruto.getText()));
            produto.setCategoria(tfCategoria.getText());
            produto.setGarantia(tfGarantia.getText());
            produto.setReferencia(tfReferencia.getText());
            produto.setEstoque(Integer.parseInt(tfEstoque.getText()));
            produto.setLoja(tfLoja.getText());
            produto.setFabricante(tfFabricante.getText());
            produto.setFornecedor(tfFornecedor.getText());
            produto.setInfoAdicional(tfInfoAdicional.getText());
            produto.setCodigoBarra(tfCodigoBarra.getText());
        } catch (NumberFormatException e) {
            Alert alerta = new Alert(Alert.AlertType.ERROR);
            alerta.setTitle("Erro");
            alerta.setHeaderText("Erro de Formato");
            alerta.setContentText("Certifique-se de que os valores numéricos foram preenchidos corretamente.");
            alerta.showAndWait();
            return;
        }

        try {
            produtoDAO.salvarProduto(produto);
            carregarProdutosNaTabela();
            limparCampos();
        } catch (Exception e) {
            Alert alerta = new Alert(Alert.AlertType.ERROR);
            alerta.setTitle("Erro");
            alerta.setHeaderText("Erro ao salvar");
            alerta.setContentText("Não foi possível salvar o produto: " + e.getMessage());
            alerta.showAndWait();
        }
    }
    
    private void preencherCamposComProduto(Produto produto) {
        tfCodigoBarra.setText(produto.getCodigoBarra());
        tfNomeProduto.setText(produto.getNome());
        tfCategoria.setText(produto.getCategoria());
        tfEstoque.setText(String.valueOf(produto.getEstoque()));
        tfPrecoVenda.setText(String.valueOf(produto.getPrecoVenda()));
        tfPrecoMestre.setText(String.valueOf(produto.getPrecoMestre()));
        tfPrecoCompra.setText(String.valueOf(produto.getPrecoCompra()));
        tfReferencia.setText(produto.getReferencia());
        tfLucroBruto.setText(String.valueOf(produto.getLucroBruto()));
        tfLoja.setText(produto.getLoja());
        tfFabricante.setText(String.valueOf(produto.getFabricante()));
        tfInfoAdicional.setText(produto.getInfoAdicional());
        tfMargem.setText(String.valueOf(produto.getMargem()));
        tfGarantia.setText(produto.getGarantia());
        tfFornecedor.setText(produto.getFornecedor());
    }
    
    public void limparCampos() {
        tfCodigoBarra.clear();
        tfNomeProduto.clear();
        tfCategoria.clear();
        tfEstoque.clear();
        tfPrecoVenda.clear();
        tfPrecoMestre.clear();
        tfPrecoCompra.clear();
        tfReferencia.clear();
        tfMargem.clear();
        tfLucroBruto.clear();
        tfLoja.clear();
        tfGarantia.clear();
        tfFabricante.clear();
        tfFornecedor.clear();
        tfInfoAdicional.clear();
    }
	
    @FXML
    public void initialize() {
    	//imgCodigoBarra.setFitWidth(148);
        //imgCodigoBarra.setFitHeight(130);
        imgCodigoBarra.setPreserveRatio(true);
        imgCodigoBarra.setSmooth(true);
        
        colCodigoBarra.setCellValueFactory(new PropertyValueFactory<>("codigoBarra"));
        colNome.setCellValueFactory(new PropertyValueFactory<>("nome"));
        colCategoria.setCellValueFactory(new PropertyValueFactory<>("categoria"));
        colEstoque.setCellValueFactory(new PropertyValueFactory<>("estoque"));
        colPrecoVenda.setCellValueFactory(new PropertyValueFactory<>("precoVenda"));
        colPrecoMestre.setCellValueFactory(new PropertyValueFactory<>("precoMestre"));
        colPrecoCompra.setCellValueFactory(new PropertyValueFactory<>("precoCompra"));
        colReferencia.setCellValueFactory(new PropertyValueFactory<>("referencia"));
        
        tabelaProdutos.setItems(produtoDAO.listarProdutos());
        
        tabelaProdutos.getSelectionModel().selectedItemProperty().addListener((obs, oldSelection, newSelection) -> {
            if (newSelection != null) {
                preencherCamposComProduto(newSelection);
            }
        }); 
    }
    
    private void carregarProdutosNaTabela() {
        ProdutoDAO dao = new ProdutoDAO();
        ObservableList<Produto> lista = dao.listarProdutos();
        tabelaProdutos.setItems(lista);
    }
    
}
